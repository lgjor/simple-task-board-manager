package org.desviante.calendar;

/**
 * Define os n√≠veis de prioridade para eventos do calend√°rio.
 * 
 * <p>A prioridade influencia a exibi√ß√£o visual dos eventos no calend√°rio,
 * determinando cores, √≠cones e posicionamento. Eventos com prioridade
 * mais alta s√£o destacados para chamar aten√ß√£o do usu√°rio.</p>
 * 
 * <p><strong>N√≠veis de Prioridade:</strong></p>
 * <ul>
 *   <li><strong>LOW:</strong> Prioridade baixa - eventos informativos</li>
 *   <li><strong>STANDARD:</strong> Prioridade padr√£o - eventos normais</li>
 *   <li><strong>HIGH:</strong> Prioridade alta - eventos importantes</li>
 *   <li><strong>URGENT:</strong> Prioridade urgente - eventos cr√≠ticos</li>
 * </ul>
 * 
 * @author A√∫ Desviante - Lucas Godoy <a href="https://github.com/lgjor">GitHub</a>
 * @version 1.0
 * @since 1.0
 * @see CalendarEvent
 */
public enum CalendarEventPriority {
    
    /**
     * Prioridade baixa.
     * 
     * <p>Eventos informativos que n√£o requerem a√ß√£o imediata.
     * Exibidos com cores suaves e baixa proemin√™ncia visual.</p>
     */
    LOW("Baixa", 1, "Eventos informativos"),
    
    /**
     * Prioridade padr√£o.
     * 
     * <p>Eventos normais que seguem o fluxo regular de trabalho.
     * Exibidos com cores padr√£o e proemin√™ncia normal.</p>
     */
    STANDARD("Padr√£o", 2, "Eventos normais"),
    
    /**
     * Prioridade alta.
     * 
     * <p>Eventos importantes que requerem aten√ß√£o especial.
     * Exibidos com cores vibrantes e alta proemin√™ncia visual.</p>
     */
    HIGH("Alta", 3, "Eventos importantes"),
    
    /**
     * Prioridade urgente.
     * 
     * <p>Eventos cr√≠ticos que requerem a√ß√£o imediata.
     * Exibidos com cores de alerta e m√°xima proemin√™ncia visual.</p>
     */
    URGENT("Urgente", 4, "Eventos cr√≠ticos");

    private final String displayName;
    private final int level;
    private final String description;

    /**
     * Construtor do enum.
     * 
     * @param displayName nome para exibi√ß√£o
     * @param level n√≠vel num√©rico da prioridade (1-4)
     * @param description descri√ß√£o da prioridade
     */
    CalendarEventPriority(String displayName, int level, String description) {
        this.displayName = displayName;
        this.level = level;
        this.description = description;
    }

    /**
     * Obt√©m o nome para exibi√ß√£o da prioridade.
     * 
     * @return nome formatado para exibi√ß√£o
     */
    public String getDisplayName() {
        return displayName;
    }

    /**
     * Obt√©m o n√≠vel num√©rico da prioridade.
     * 
     * <p>Valores de 1 (baixa) a 4 (urgente). Usado para ordena√ß√£o
     * e compara√ß√£o de prioridades.</p>
     * 
     * @return n√≠vel num√©rico da prioridade
     */
    public int getLevel() {
        return level;
    }

    /**
     * Obt√©m a descri√ß√£o da prioridade.
     * 
     * @return descri√ß√£o detalhada da prioridade
     */
    public String getDescription() {
        return description;
    }

    /**
     * Verifica se esta prioridade √© maior que outra.
     * 
     * @param other outra prioridade para compara√ß√£o
     * @return true se esta prioridade √© maior que a outra
     */
    public boolean isHigherThan(CalendarEventPriority other) {
        return this.level > other.level;
    }

    /**
     * Verifica se esta prioridade √© menor que outra.
     * 
     * @param other outra prioridade para compara√ß√£o
     * @return true se esta prioridade √© menor que a outra
     */
    public boolean isLowerThan(CalendarEventPriority other) {
        return this.level < other.level;
    }

    /**
     * Verifica se esta prioridade √© igual a outra.
     * 
     * @param other outra prioridade para compara√ß√£o
     * @return true se as prioridades s√£o iguais
     */
    public boolean isEqualTo(CalendarEventPriority other) {
        return this.level == other.level;
    }

    /**
     * Obt√©m a cor associada √† prioridade.
     * 
     * <p>Retorna um c√≥digo de cor hexadecimal que representa
     * visualmente o n√≠vel de prioridade.</p>
     * 
     * @return c√≥digo de cor hexadecimal
     */
    public String getColor() {
        return switch (this) {
            case LOW -> "#95A5A6";        // Cinza claro
            case STANDARD -> "#3498DB";   // Azul padr√£o
            case HIGH -> "#F39C12";       // Laranja
            case URGENT -> "#E74C3C";     // Vermelho
        };
    }

    /**
     * Obt√©m a cor de fundo associada √† prioridade.
     * 
     * <p>Retorna uma vers√£o mais clara da cor principal para
     * uso como cor de fundo em elementos da interface.</p>
     * 
     * @return c√≥digo de cor hexadecimal para fundo
     */
    public String getBackgroundColor() {
        return switch (this) {
            case LOW -> "#ECF0F1";        // Cinza muito claro
            case STANDARD -> "#EBF3FD";   // Azul muito claro
            case HIGH -> "#FEF9E7";       // Amarelo muito claro
            case URGENT -> "#FADBD8";     // Vermelho muito claro
        };
    }

    /**
     * Obt√©m o √≠cone associado √† prioridade.
     * 
     * <p>Retorna um c√≥digo de √≠cone que representa visualmente
     * o n√≠vel de prioridade.</p>
     * 
     * @return c√≥digo do √≠cone
     */
    public String getIconCode() {
        return switch (this) {
            case LOW -> "üîµ";
            case STANDARD -> "üî∑";
            case HIGH -> "üî∂";
            case URGENT -> "üî¥";
        };
    }

    /**
     * Obt√©m a prioridade padr√£o do sistema.
     * 
     * @return prioridade padr√£o (STANDARD)
     */
    public static CalendarEventPriority getDefault() {
        return STANDARD;
    }

    /**
     * Obt√©m a prioridade mais alta dispon√≠vel.
     * 
     * @return prioridade mais alta (URGENT)
     */
    public static CalendarEventPriority getHighest() {
        return URGENT;
    }

    /**
     * Obt√©m a prioridade mais baixa dispon√≠vel.
     * 
     * @return prioridade mais baixa (LOW)
     */
    public static CalendarEventPriority getLowest() {
        return LOW;
    }

    @Override
    public String toString() {
        return displayName;
    }
}
