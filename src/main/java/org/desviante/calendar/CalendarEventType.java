package org.desviante.calendar;

/**
 * Define os tipos de eventos dispon√≠veis no calend√°rio.
 * 
 * <p>Cada tipo de evento pode ter comportamentos espec√≠ficos de exibi√ß√£o,
 * edi√ß√£o e sincroniza√ß√£o com o sistema principal. Os tipos s√£o usados
 * para categorizar eventos e aplicar regras espec√≠ficas.</p>
 * 
 * <p><strong>Tipos Dispon√≠veis:</strong></p>
 * <ul>
 *   <li><strong>CARD:</strong> Eventos originados de cards do sistema</li>
 *   <li><strong>TASK:</strong> Eventos originados de tasks do Google</li>
 *   <li><strong>MEETING:</strong> Reuni√µes e compromissos</li>
 *   <li><strong>REMINDER:</strong> Lembretes e notifica√ß√µes</li>
 *   <li><strong>DEADLINE:</strong> Prazos e marcos importantes</li>
 *   <li><strong>CUSTOM:</strong> Eventos personalizados do usu√°rio</li>
 * </ul>
 * 
 * @author A√∫ Desviante - Lucas Godoy <a href="https://github.com/desviante">GitHub</a>
 * @version 1.0
 * @since 1.0
 * @see CalendarEvent
 */
public enum CalendarEventType {
    
    /**
     * Evento originado de um card do sistema.
     * 
     * <p>Este tipo de evento √© criado automaticamente baseado em cards
     * e mant√©m sincroniza√ß√£o bidirecional com o sistema de boards.</p>
     */
    CARD("Card", "Evento originado de um card do sistema"),
    
    /**
     * Evento originado de uma task do Google Tasks.
     * 
     * <p>Este tipo de evento √© sincronizado com a API do Google Tasks
     * e reflete mudan√ßas feitas tanto no sistema local quanto no Google.</p>
     */
    TASK("Task", "Evento originado de uma task do Google"),
    
    /**
     * Reuni√£o ou compromisso agendado.
     * 
     * <p>Eventos criados manualmente pelo usu√°rio para marcar
     * reuni√µes, compromissos ou outros eventos importantes.</p>
     */
    MEETING("Reuni√£o", "Reuni√£o ou compromisso agendado"),
    
    /**
     * Lembrete ou notifica√ß√£o.
     * 
     * <p>Eventos criados para lembrar o usu√°rio de tarefas importantes
     * ou marcos que precisam de aten√ß√£o.</p>
     */
    REMINDER("Lembrete", "Lembrete ou notifica√ß√£o"),
    
    /**
     * Prazo ou marco importante.
     * 
     * <p>Eventos que marcam prazos importantes, entregas ou marcos
     * de projetos que requerem aten√ß√£o especial.</p>
     */
    DEADLINE("Prazo", "Prazo ou marco importante"),
    
    /**
     * Evento personalizado do usu√°rio.
     * 
     * <p>Eventos criados pelo usu√°rio que n√£o se enquadram nas
     * outras categorias espec√≠ficas.</p>
     */
    CUSTOM("Personalizado", "Evento personalizado do usu√°rio");

    private final String displayName;
    private final String description;

    /**
     * Construtor do enum.
     * 
     * @param displayName nome para exibi√ß√£o
     * @param description descri√ß√£o do tipo
     */
    CalendarEventType(String displayName, String description) {
        this.displayName = displayName;
        this.description = description;
    }

    /**
     * Obt√©m o nome para exibi√ß√£o do tipo de evento.
     * 
     * @return nome formatado para exibi√ß√£o
     */
    public String getDisplayName() {
        return displayName;
    }

    /**
     * Obt√©m a descri√ß√£o do tipo de evento.
     * 
     * @return descri√ß√£o detalhada do tipo
     */
    public String getDescription() {
        return description;
    }

    /**
     * Verifica se o tipo de evento √© relacionado a entidades do sistema.
     * 
     * <p>Tipos relacionados a entidades (CARD, TASK) mant√™m sincroniza√ß√£o
     * com o sistema principal e podem ter restri√ß√µes de edi√ß√£o.</p>
     * 
     * @return true se o tipo est√° relacionado a entidades do sistema
     */
    public boolean isSystemRelated() {
        return this == CARD || this == TASK;
    }

    /**
     * Verifica se o tipo de evento √© edit√°vel pelo usu√°rio.
     * 
     * <p>Alguns tipos podem ter restri√ß√µes de edi√ß√£o baseadas em
     * regras de neg√≥cio ou sincroniza√ß√£o com sistemas externos.</p>
     * 
     * @return true se o tipo pode ser editado pelo usu√°rio
     */
    public boolean isUserEditable() {
        return this != CARD && this != TASK;
    }

    /**
     * Obt√©m o √≠cone associado ao tipo de evento.
     * 
     * <p>Retorna um c√≥digo de √≠cone que pode ser usado na interface
     * para representar visualmente o tipo de evento.</p>
     * 
     * @return c√≥digo do √≠cone
     */
    public String getIconCode() {
        return switch (this) {
            case CARD -> "üìã";
            case TASK -> "‚úÖ";
            case MEETING -> "üë•";
            case REMINDER -> "üîî";
            case DEADLINE -> "‚è∞";
            case CUSTOM -> "üìÖ";
        };
    }

    /**
     * Obt√©m a cor padr√£o associada ao tipo de evento.
     * 
     * <p>Retorna um c√≥digo de cor hexadecimal que pode ser usado
     * como cor padr√£o para eventos deste tipo.</p>
     * 
     * @return c√≥digo de cor hexadecimal
     */
    public String getDefaultColor() {
        return switch (this) {
            case CARD -> "#4A90E2";
            case TASK -> "#7ED321";
            case MEETING -> "#F5A623";
            case REMINDER -> "#D0021B";
            case DEADLINE -> "#9013FE";
            case CUSTOM -> "#50E3C2";
        };
    }

    @Override
    public String toString() {
        return displayName;
    }
}
