package org.desviante.integration.sync;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.desviante.service.DatabaseMigrationService;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

/**
 * Servi√ßo para gerenciamento de status de sincroniza√ß√£o.
 * 
 * <p>Esta classe implementa a l√≥gica de neg√≥cio para gerenciamento
 * de status de sincroniza√ß√£o entre cards locais e sistemas externos,
 * incluindo cria√ß√£o, atualiza√ß√£o, retry autom√°tico e auditoria.</p>
 * 
 * <p><strong>Princ√≠pios SOLID Aplicados:</strong></p>
 * <ul>
 *   <li><strong>SRP:</strong> Respons√°vel apenas pela l√≥gica de sincroniza√ß√£o</li>
 *   <li><strong>OCP:</strong> Extens√≠vel atrav√©s de novos tipos de integra√ß√£o</li>
 *   <li><strong>LSP:</strong> Trabalha com qualquer implementa√ß√£o de repository</li>
 *   <li><strong>ISP:</strong> Interface espec√≠fica para sincroniza√ß√£o</li>
 *   <li><strong>DIP:</strong> Depende de abstra√ß√µes (IntegrationSyncRepository)</li>
 * </ul>
 * 
 * <p><strong>Responsabilidades:</strong></p>
 * <ul>
 *   <li>Gerenciamento de status de sincroniza√ß√£o</li>
 *   <li>Implementa√ß√£o de l√≥gicas de retry</li>
 *   <li>Auditoria de opera√ß√µes</li>
 *   <li>Valida√ß√£o de consist√™ncia</li>
 *   <li>Relat√≥rios de sincroniza√ß√£o</li>
 * </ul>
 * 
 * @author A√∫ Desviante - Lucas Godoy <a href="https://github.com/desviante">GitHub</a>
 * @version 1.0
 * @since 1.0
 * @see IntegrationSyncStatus
 * @see IntegrationSyncRepository
 * @see IntegrationType
 * @see SyncStatus
 */
@Service
@RequiredArgsConstructor
@Slf4j
public class IntegrationSyncService {
    
    private final IntegrationSyncRepository repository;
    private final DatabaseMigrationService migrationService;
    
    /**
     * Garante que a tabela de sincroniza√ß√£o existe antes de executar opera√ß√µes.
     */
    private void ensureTableExists() {
        try {
            migrationService.ensureIntegrationSyncStatusTable();
        } catch (Exception e) {
            log.error("Erro ao garantir exist√™ncia da tabela de sincroniza√ß√£o: {}", e.getMessage(), e);
            throw new RuntimeException("Falha ao preparar banco de dados para sincroniza√ß√£o", e);
        }
    }
    
    /**
     * Cria um novo status de sincroniza√ß√£o para um card e tipo de integra√ß√£o.
     * 
     * @param cardId ID do card
     * @param integrationType tipo de integra√ß√£o
     * @param maxRetries n√∫mero m√°ximo de tentativas (opcional)
     * @return status criado
     */
    @Transactional
    public IntegrationSyncStatus createSyncStatus(Long cardId, IntegrationType integrationType, Integer maxRetries) {
        log.info("üîß INTEGRATION SYNC SERVICE - Criando status de sincroniza√ß√£o para card {} e tipo {}", cardId, integrationType);
        
        try {
            // Verificar se j√° existe um status para este card e tipo
            log.info("üîß INTEGRATION SYNC SERVICE - Verificando se j√° existe status para card {} e tipo {}", cardId, integrationType);
            Optional<IntegrationSyncStatus> existing = repository.findByCardIdAndType(cardId, integrationType);
            if (existing.isPresent()) {
                log.warn("‚ö†Ô∏è INTEGRATION SYNC SERVICE - Status de sincroniza√ß√£o j√° existe para card {} e tipo {}", cardId, integrationType);
                return existing.get();
            }
            
            log.info("üîß INTEGRATION SYNC SERVICE - Construindo novo status de sincroniza√ß√£o");
            IntegrationSyncStatus status = IntegrationSyncStatus.builder()
                    .cardId(cardId)
                    .integrationType(integrationType)
                    .syncStatus(SyncStatus.PENDING)
                    .retryCount(0)
                    .maxRetries(maxRetries != null ? maxRetries : 3)
                    .createdAt(LocalDateTime.now())
                    .updatedAt(LocalDateTime.now())
                    .build();
            log.info("‚úÖ INTEGRATION SYNC SERVICE - Status constru√≠do com sucesso");
            
            log.info("üîß INTEGRATION SYNC SERVICE - Salvando status no reposit√≥rio");
            IntegrationSyncStatus saved = repository.save(status);
            log.info("‚úÖ INTEGRATION SYNC SERVICE - Status de sincroniza√ß√£o criado com ID: {}", saved.getId());
            
            return saved;
            
        } catch (Exception e) {
            log.error("‚ùå INTEGRATION SYNC SERVICE - Erro ao criar status de sincroniza√ß√£o para card {} e tipo {}: {}", cardId, integrationType, e.getMessage(), e);
            throw new RuntimeException("Falha ao criar status de sincroniza√ß√£o", e);
        }
    }
    
    /**
     * Cria um novo status de sincroniza√ß√£o com configura√ß√µes padr√£o.
     * 
     * @param cardId ID do card
     * @param integrationType tipo de integra√ß√£o
     * @return status criado
     */
    public IntegrationSyncStatus createSyncStatus(Long cardId, IntegrationType integrationType) {
        return createSyncStatus(cardId, integrationType, null);
    }
    
    /**
     * Marca uma sincroniza√ß√£o como bem-sucedida.
     * 
     * @param cardId ID do card
     * @param integrationType tipo de integra√ß√£o
     * @param externalId ID da entidade no sistema externo
     */
    @Transactional
    public void markAsSynced(Long cardId, IntegrationType integrationType, String externalId) {
        log.debug("Marcando sincroniza√ß√£o como bem-sucedida para card {} e tipo {}", cardId, integrationType);
        
        Optional<IntegrationSyncStatus> statusOpt = repository.findByCardIdAndType(cardId, integrationType);
        if (statusOpt.isEmpty()) {
            log.warn("Status de sincroniza√ß√£o n√£o encontrado para card {} e tipo {}", cardId, integrationType);
            return;
        }
        
        IntegrationSyncStatus status = statusOpt.get();
        status.markAsSynced(externalId);
        repository.save(status);
        
        log.info("Sincroniza√ß√£o marcada como bem-sucedida para card {} e tipo {} (external ID: {})", 
                cardId, integrationType, externalId);
    }
    
    /**
     * Marca uma sincroniza√ß√£o como erro.
     * 
     * @param cardId ID do card
     * @param integrationType tipo de integra√ß√£o
     * @param errorMessage mensagem de erro
     */
    @Transactional
    public void markAsError(Long cardId, IntegrationType integrationType, String errorMessage) {
        log.debug("Marcando sincroniza√ß√£o como erro para card {} e tipo {}", cardId, integrationType);
        
        Optional<IntegrationSyncStatus> statusOpt = repository.findByCardIdAndType(cardId, integrationType);
        if (statusOpt.isEmpty()) {
            log.warn("Status de sincroniza√ß√£o n√£o encontrado para card {} e tipo {}", cardId, integrationType);
            return;
        }
        
        IntegrationSyncStatus status = statusOpt.get();
        status.markAsError(errorMessage);
        repository.save(status);
        
        log.info("Sincroniza√ß√£o marcada como erro para card {} e tipo {}: {}", 
                cardId, integrationType, errorMessage);
    }
    
    /**
     * Marca uma sincroniza√ß√£o para retry.
     * 
     * @param cardId ID do card
     * @param integrationType tipo de integra√ß√£o
     * @return true se pode fazer retry, false se atingiu limite
     */
    @Transactional
    public boolean markForRetry(Long cardId, IntegrationType integrationType) {
        log.debug("Marcando sincroniza√ß√£o para retry para card {} e tipo {}", cardId, integrationType);
        
        Optional<IntegrationSyncStatus> statusOpt = repository.findByCardIdAndType(cardId, integrationType);
        if (statusOpt.isEmpty()) {
            log.warn("Status de sincroniza√ß√£o n√£o encontrado para card {} e tipo {}", cardId, integrationType);
            return false;
        }
        
        IntegrationSyncStatus status = statusOpt.get();
        
        if (!status.canRetry()) {
            log.warn("Limite de retry atingido para card {} e tipo {}", cardId, integrationType);
            status.markAsError("Limite de tentativas atingido");
            repository.save(status);
            return false;
        }
        
        status.markAsRetry();
        repository.save(status);
        
        log.info("Sincroniza√ß√£o marcada para retry para card {} e tipo {} (tentativa {}/{})", 
                cardId, integrationType, status.getRetryCount(), status.getMaxRetries());
        
        return true;
    }
    
    /**
     * Obt√©m o status de sincroniza√ß√£o para um card e tipo espec√≠fico.
     * 
     * @param cardId ID do card
     * @param integrationType tipo de integra√ß√£o
     * @return Optional contendo o status se encontrado
     */
    public Optional<IntegrationSyncStatus> getSyncStatus(Long cardId, IntegrationType integrationType) {
        return repository.findByCardIdAndType(cardId, integrationType);
    }
    
    /**
     * Obt√©m todos os status de sincroniza√ß√£o para um card.
     * 
     * @param cardId ID do card
     * @return lista de status de sincroniza√ß√£o
     */
    public List<IntegrationSyncStatus> getSyncStatusesForCard(Long cardId) {
        return repository.findByCardId(cardId);
    }
    
    /**
     * Obt√©m todos os status que precisam de retry.
     * 
     * @return lista de status que podem ser tentados novamente
     */
    public List<IntegrationSyncStatus> getRetryableStatuses() {
        return repository.findRetryableStatuses();
    }
    
    /**
     * Obt√©m todos os status com erro que podem ser tentados novamente.
     * 
     * @return lista de status com erro que ainda podem ser retry
     */
    public List<IntegrationSyncStatus> getErrorStatusesForRetry() {
        return repository.findErrorStatusesForRetry();
    }
    
    /**
     * Remove todos os status de sincroniza√ß√£o para um card.
     * 
     * @param cardId ID do card
     */
    @Transactional
    public void removeSyncStatusesForCard(Long cardId) {
        log.info("Removendo todos os status de sincroniza√ß√£o para card {}", cardId);
        repository.deleteByCardId(cardId);
    }
    
    /**
     * Obt√©m estat√≠sticas de sincroniza√ß√£o.
     * 
     * @return estat√≠sticas de sincroniza√ß√£o
     */
    public SyncStatistics getStatistics() {
        long totalSyncs = repository.countBySyncStatus(SyncStatus.SYNCED) +
                         repository.countBySyncStatus(SyncStatus.PENDING) +
                         repository.countBySyncStatus(SyncStatus.ERROR) +
                         repository.countBySyncStatus(SyncStatus.RETRY);
        
        long syncedCount = repository.countBySyncStatus(SyncStatus.SYNCED);
        long pendingCount = repository.countBySyncStatus(SyncStatus.PENDING);
        long errorCount = repository.countBySyncStatus(SyncStatus.ERROR);
        long retryCount = repository.countBySyncStatus(SyncStatus.RETRY);
        
        long googleTasksCount = repository.countByIntegrationType(IntegrationType.GOOGLE_TASKS);
        long calendarCount = repository.countByIntegrationType(IntegrationType.CALENDAR);
        
        return SyncStatistics.builder()
                .totalSyncs(totalSyncs)
                .syncedCount(syncedCount)
                .pendingCount(pendingCount)
                .errorCount(errorCount)
                .retryCount(retryCount)
                .googleTasksCount(googleTasksCount)
                .calendarCount(calendarCount)
                .generatedAt(LocalDateTime.now())
                .build();
    }
    
    /**
     * Verifica se um card est√° sincronizado com um tipo espec√≠fico.
     * 
     * @param cardId ID do card
     * @param integrationType tipo de integra√ß√£o
     * @return true se est√° sincronizado
     */
    public boolean isCardSynced(Long cardId, IntegrationType integrationType) {
        Optional<IntegrationSyncStatus> status = getSyncStatus(cardId, integrationType);
        return status.isPresent() && status.get().isSynced();
    }
    
    /**
     * Verifica se um card tem erros de sincroniza√ß√£o.
     * 
     * @param cardId ID do card
     * @return true se tem erros
     */
    public boolean hasSyncErrors(Long cardId) {
        List<IntegrationSyncStatus> statuses = getSyncStatusesForCard(cardId);
        return statuses.stream().anyMatch(IntegrationSyncStatus::hasError);
    }
    
    /**
     * Obt√©m o ID externo de um card sincronizado.
     * 
     * @param cardId ID do card
     * @param integrationType tipo de integra√ß√£o
     * @return Optional contendo o ID externo se encontrado
     */
    public Optional<String> getExternalId(Long cardId, IntegrationType integrationType) {
        Optional<IntegrationSyncStatus> status = getSyncStatus(cardId, integrationType);
        return status.map(IntegrationSyncStatus::getExternalId);
    }
}
