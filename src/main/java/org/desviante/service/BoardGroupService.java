package org.desviante.service;

import java.time.LocalDateTime;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.function.Function;
import java.util.stream.Collectors;

import org.desviante.config.AppMetadataConfig;
import org.desviante.exception.ResourceNotFoundException;
import org.desviante.model.Board;
import org.desviante.model.BoardColumn;
import org.desviante.model.BoardGroup;
import org.desviante.model.Card;
import org.desviante.repository.BoardGroupRepository;
import org.desviante.repository.BoardRepository;
import org.desviante.service.dto.BoardSummaryDTO;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.StringUtils;

import lombok.RequiredArgsConstructor;

/**
 * Gerencia as opera√ß√µes de neg√≥cio relacionadas aos grupos de quadros.
 * 
 * <p>Respons√°vel por implementar a l√≥gica de neg√≥cio para cria√ß√£o, atualiza√ß√£o,
 * consulta e remo√ß√£o de grupos de quadros. Esta camada de servi√ßo implementa
 * valida√ß√µes importantes como unicidade de nomes, verifica√ß√£o de depend√™ncias
 * antes da remo√ß√£o e gera√ß√£o autom√°tica de cores para identifica√ß√£o visual.</p>
 * 
 * <p>Implementa funcionalidades avan√ßadas como c√°lculo de resumos de quadros
 * por grupo, incluindo estat√≠sticas de progresso e status baseados na
 * distribui√ß√£o de cards entre colunas de diferentes tipos.</p>
 * 
 * <p>Utiliza transa√ß√µes para garantir consist√™ncia dos dados, com opera√ß√µes
 * de leitura marcadas como readOnly para otimiza√ß√£o de performance.</p>
 * 
 * @author A√∫ Desviante - Lucas Godoy <a href="https://github.com/desviante">GitHub</a>
 * @version 1.0
 * @since 1.0
 * @see BoardGroup
 * @see BoardSummaryDTO
 * @see BoardGroupRepository
 */
@Service
@RequiredArgsConstructor
public class BoardGroupService {

    private final BoardGroupRepository boardGroupRepository;
    private final BoardRepository boardRepository;
    private final BoardColumnService columnService;
    private final CardService cardService;
    private final AppMetadataConfig appMetadataConfig;

    /**
     * Busca todos os grupos de quadros dispon√≠veis no sistema.
     * 
     * @return lista de todos os grupos
     */
    @Transactional(readOnly = true)
    public List<BoardGroup> getAllBoardGroups() {
        return boardGroupRepository.findAll();
    }
    
    /**
     * Cria um novo grupo de quadros com valida√ß√µes de integridade.
     * 
     * <p>Valida que o nome √© obrigat√≥rio e √∫nico (case-insensitive).
     * Gera automaticamente uma cor aleat√≥ria para identifica√ß√£o visual
     * e define um √≠cone padr√£o se n√£o fornecido.</p>
     * 
     * @param name nome do novo grupo
     * @param description descri√ß√£o opcional do grupo
     * @param icon √≠cone opcional do grupo (usa "üìÅ" como padr√£o)
     * @return grupo criado com ID gerado
     * @throws IllegalArgumentException se o nome for vazio ou j√° existir
     */
    @Transactional
    public BoardGroup createBoardGroup(String name, String description, String icon) {
        // Valida√ß√£o dos par√¢metros obrigat√≥rios
        if (!StringUtils.hasText(name)) {
            throw new IllegalArgumentException("Nome do grupo √© obrigat√≥rio");
        }
        
        // Valida√ß√£o de unicidade do nome (case-insensitive)
        String trimmedName = name.trim();
        if (boardGroupRepository.findByName(trimmedName).isPresent()) {
            throw new IllegalArgumentException("J√° existe um grupo com o nome '" + trimmedName + "'. Escolha um nome diferente.");
        }
        
        // Gerar cor aleat√≥ria no backend
        String color = generateRandomColor();
        
        // Cria√ß√£o do novo grupo
        BoardGroup newGroup = new BoardGroup();
        newGroup.setName(trimmedName);
        newGroup.setDescription(description != null ? description.trim() : "");
        newGroup.setColor(color);
        newGroup.setIcon(icon != null ? icon : "üìÅ"); // Usar √≠cone fornecido ou padr√£o
        newGroup.setCreationDate(LocalDateTime.now());
        // Removido setDefault - n√£o precisamos mais de grupo padr√£o
        
        return boardGroupRepository.save(newGroup);
    }

    /**
     * Atualiza um grupo de quadros existente.
     * 
     * <p>Valida a exist√™ncia do grupo e a unicidade do novo nome
     * (excluindo o pr√≥prio grupo da verifica√ß√£o). Mant√©m a cor
     * existente para preservar a identidade visual do grupo.</p>
     * 
     * @param groupId identificador do grupo a ser atualizado
     * @param name novo nome do grupo
     * @param description nova descri√ß√£o do grupo
     * @param icon novo √≠cone do grupo
     * @return grupo atualizado
     * @throws ResourceNotFoundException se o grupo n√£o for encontrado
     * @throws IllegalArgumentException se o nome for vazio ou j√° existir
     */
    @Transactional
    public BoardGroup updateBoardGroup(Long groupId, String name, String description, String icon) {
        // Valida√ß√£o do grupo existente
        BoardGroup existingGroup = boardGroupRepository.findById(groupId)
                .orElseThrow(() -> new ResourceNotFoundException("Grupo com ID " + groupId + " n√£o encontrado."));
        
        // Valida√ß√µes de entrada
        if (!StringUtils.hasText(name)) {
            throw new IllegalArgumentException("Nome do grupo √© obrigat√≥rio");
        }
            
        // Valida√ß√£o de unicidade do nome (case-insensitive, excluindo o pr√≥prio grupo)
        String trimmedName = name.trim();
        if (boardGroupRepository.findByNameExcludingId(trimmedName, groupId).isPresent()) {
            throw new IllegalArgumentException("J√° existe um grupo com o nome '" + trimmedName + "'. Escolha um nome diferente.");
        }
        
        // Atualiza√ß√£o dos campos
        existingGroup.setName(trimmedName);
        existingGroup.setDescription(description != null ? description.trim() : "");
        // Manter a cor existente - n√£o alterar a cor no update
        existingGroup.setIcon(icon != null ? icon : "üìÅ"); // √çcone padr√£o se n√£o fornecido
        
        return boardGroupRepository.save(existingGroup);
    }

    /**
     * Remove um grupo de quadros com valida√ß√£o de depend√™ncias.
     * 
     * <p>Verifica se existem quadros associados ao grupo antes de permitir
     * a remo√ß√£o, garantindo integridade referencial. Se houver quadros
     * associados, lan√ßa exce√ß√£o informando quantos quadros precisam ser
     * movidos antes da remo√ß√£o.</p>
     * 
     * @param groupId identificador do grupo a ser removido
     * @throws ResourceNotFoundException se o grupo n√£o for encontrado
     * @throws IllegalArgumentException se existirem quadros associados ao grupo
     */
    @Transactional
    public void deleteBoardGroup(Long groupId) {
        // Valida√ß√£o do grupo existente
        BoardGroup existingGroup = boardGroupRepository.findById(groupId)
                .orElseThrow(() -> new ResourceNotFoundException("Grupo com ID " + groupId + " n√£o encontrado."));
        
        // Verificar se o grupo √© o padr√£o configurado
        Optional<Long> defaultGroupId = appMetadataConfig.getDefaultBoardGroupId();
        if (defaultGroupId.isPresent() && defaultGroupId.get().equals(groupId)) {
            throw new IllegalArgumentException("N√£o √© poss√≠vel deletar o grupo '" + existingGroup.getName() + 
                    "' pois ele est√° configurado como grupo padr√£o no sistema. " +
                    "Altere a configura√ß√£o padr√£o antes de deletar o grupo.");
        }
        
        // Verificar se existem boards associados ao grupo
        List<Board> boardsInGroup = boardRepository.findByGroupId(groupId);
        if (boardsInGroup != null && !boardsInGroup.isEmpty()) {
            throw new IllegalArgumentException("N√£o √© poss√≠vel deletar o grupo '" + existingGroup.getName() + 
                    "' pois existem " + boardsInGroup.size() + " board(s) associado(s). " +
                    "Mova os boards para outro grupo antes de deletar.");
        }
        
        // Deletar o grupo
        boardGroupRepository.deleteById(groupId);
    }

    /**
     * Busca resumos de todos os quadros de um grupo espec√≠fico.
     * 
     * <p>Calcula estat√≠sticas detalhadas de cada quadro, incluindo
     * percentuais de progresso baseados na distribui√ß√£o de cards
     * entre colunas de diferentes tipos (INITIAL, PENDING, FINAL).
     * Tamb√©m determina o status geral do quadro baseado na distribui√ß√£o.</p>
     * 
     * <p>Otimiza consultas atrav√©s de busca em lote de colunas e cards
     * para evitar problemas N+1 de performance.</p>
     * 
     * @param groupId identificador do grupo
     * @return lista de resumos dos quadros do grupo
     * @throws ResourceNotFoundException se o grupo n√£o for encontrado
     */
    @Transactional(readOnly = true)
    public List<BoardSummaryDTO> getBoardsByGroup(Long groupId) {
        // Valida√ß√£o do grupo
        Optional<BoardGroup> group = boardGroupRepository.findById(groupId);
        if (group.isEmpty()) {
            throw new ResourceNotFoundException("Grupo com ID " + groupId + " n√£o encontrado.");
        }
        
        // Busca todos os boards do grupo
        List<Board> boards = boardRepository.findByGroupId(groupId);
        
        if (boards.isEmpty()) {
            return Collections.emptyList();
        }
        
        // Busca todas as colunas para todos os boards
        List<Long> boardIds = boards.stream().map(Board::getId).collect(Collectors.toList());
        List<BoardColumn> allColumns = columnService.getColumnsForBoards(boardIds);
        
        // Agrupa colunas por board
        Map<Long, List<BoardColumn>> columnsByBoardId = allColumns.stream()
                .collect(Collectors.groupingBy(BoardColumn::getBoardId));
        
        // Busca todos os cards para todas as colunas
        List<Long> columnIds = allColumns.stream().map(BoardColumn::getId).collect(Collectors.toList());
        List<Card> allCards = cardService.getCardsForColumns(columnIds);
        
        // Agrupa cards por coluna
        Map<Long, List<Card>> cardsByColumnId = allCards.stream()
                .collect(Collectors.groupingBy(Card::getBoardColumnId));
        
        // Calcula resumo para cada board
        return boards.stream()
                .map(board -> calculateBoardSummary(board, columnsByBoardId, cardsByColumnId))
                .collect(Collectors.toList());
    }
    
    /**
     * Calcula o resumo estat√≠stico de um quadro espec√≠fico.
     * 
     * <p>Analisa a distribui√ß√£o de cards entre colunas de diferentes tipos
     * para determinar percentuais de progresso e status geral do quadro.
     * Status poss√≠veis: "Vazio", "N√£o iniciado", "Em andamento", "Conclu√≠do".</p>
     * 
     * @param board quadro para c√°lculo do resumo
     * @param columnsByBoardId mapa de colunas agrupadas por quadro
     * @param cardsByColumnId mapa de cards agrupados por coluna
     * @return resumo estat√≠stico do quadro
     */
    private BoardSummaryDTO calculateBoardSummary(Board board, Map<Long, List<BoardColumn>> columnsByBoardId, Map<Long, List<Card>> cardsByColumnId) {
        List<BoardColumn> boardColumns = columnsByBoardId.getOrDefault(board.getId(), Collections.emptyList());

        Map<Long, BoardColumn> columnMap = boardColumns.stream()
                .collect(Collectors.toMap(BoardColumn::getId, Function.identity()));

        List<Card> boardCards = boardColumns.stream()
                .flatMap(col -> cardsByColumnId.getOrDefault(col.getId(), Collections.emptyList()).stream())
                .toList();

        int totalCards = boardCards.size();

        // Regra de neg√≥cio: Vazio
        if (totalCards == 0) {
            return new BoardSummaryDTO(board.getId(), board.getName(), 0, 0, 0, "Vazio", board.getGroup());
        }

        long initialCount = 0;
        long pendingCount = 0;
        long finalCount = 0;

        for (Card card : boardCards) {
            BoardColumn parentColumn = columnMap.get(card.getBoardColumnId());
            if (parentColumn != null) {
                switch (parentColumn.getKind()) {
                    case INITIAL -> initialCount++;
                    case PENDING -> pendingCount++;
                    case FINAL -> finalCount++;
                }
            }
        }

        // L√≥gica de status do board
        String boardStatus;
        if (initialCount == totalCards) {
            boardStatus = "N√£o iniciado";
        } else if (finalCount == totalCards) {
            boardStatus = "Conclu√≠do";
        } else {
            boardStatus = "Em andamento";
        }

        // L√≥gica de arredondamento simples por truncamento
        int percentInitial = (int) (100.0 * initialCount / totalCards);
        int percentPending = (int) (100.0 * pendingCount / totalCards);
        int percentFinal = (int) (100.0 * finalCount / totalCards);

        return new BoardSummaryDTO(
                board.getId(),
                board.getName(),
                percentInitial,
                percentPending,
                percentFinal,
                boardStatus,
                board.getGroup()
        );
    }

    /**
     * Verifica se existe um grupo com o nome especificado.
     * 
     * <p>Utilizada para valida√ß√£o de unicidade de nomes de grupos.
     * A verifica√ß√£o √© case-insensitive para evitar duplicatas com diferen√ßas
     * apenas de mai√∫sculas/min√∫sculas.</p>
     * 
     * @param name nome do grupo a ser verificado
     * @return true se o grupo existe, false caso contr√°rio
     */
    @Transactional(readOnly = true)
    public boolean existsByName(String name) {
        return boardGroupRepository.existsByName(name);
    }

    /**
     * Gera uma cor hexadecimal aleat√≥ria para identifica√ß√£o visual do grupo.
     * 
     * <p>Utiliza um conjunto predefinido de cores para garantir boa
     * legibilidade e contraste adequado na interface do usu√°rio.</p>
     * 
     * @return cor hexadecimal no formato #RRGGBB
     */
    private String generateRandomColor() {
        // Array de cores predefinidas para garantir boa legibilidade
        String[] predefinedColors = {
            "#FF6B6B", // Vermelho
            "#4ECDC4", // Turquesa
            "#45B7D1", // Azul
            "#96CEB4", // Verde claro
            "#FFEAA7", // Amarelo
            "#DDA0DD", // Lavanda
            "#98D8C8", // Verde √°gua
            "#F7DC6F", // Dourado
            "#BB8FCE", // Roxo
            "#85C1E9", // Azul claro
            "#F8C471", // Laranja
            "#82E0AA", // Verde
            "#F1948A", // Rosa
            "#85C1E9", // Azul
            "#F7DC6F"  // Amarelo
        };
        
        // Selecionar uma cor aleat√≥ria do array
        int randomIndex = (int) (Math.random() * predefinedColors.length);
        return predefinedColors[randomIndex];
    }
}