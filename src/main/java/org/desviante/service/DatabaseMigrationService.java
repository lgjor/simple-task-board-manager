package org.desviante.service;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Service;

import javax.sql.DataSource;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;

/**
 * Servi√ßo respons√°vel por executar migra√ß√µes do banco de dados de forma segura.
 * 
 * <p>Este servi√ßo garante que as migra√ß√µes sejam executadas sem perder dados existentes,
 * verificando se as tabelas necess√°rias existem antes de tentar utiliz√°-las.</p>
 * 
 * @author A√∫ Desviante - Lucas Godoy
 * @version 1.0
 * @since 1.0
 */
@Service
@RequiredArgsConstructor
@Slf4j
public class DatabaseMigrationService {

    private final DataSource dataSource;
    
    @Autowired(required = false)
    private JdbcTemplate jdbcTemplate;

    /**
     * Verifica se uma tabela existe no banco de dados.
     * 
     * @param tableName nome da tabela a ser verificada
     * @return true se a tabela existe, false caso contr√°rio
     */
    public boolean tableExists(String tableName) {
        try (Connection connection = dataSource.getConnection()) {
            DatabaseMetaData metaData = connection.getMetaData();
            ResultSet tables = metaData.getTables(null, null, tableName.toUpperCase(), new String[]{"TABLE"});
            boolean exists = tables.next();
            tables.close();
            return exists;
        } catch (Exception e) {
            log.warn("Erro ao verificar exist√™ncia da tabela {}: {}", tableName, e.getMessage());
            return false;
        }
    }

    /**
     * Executa a cria√ß√£o da tabela integration_sync_status se ela n√£o existir.
     * Se existir com estrutura incorreta, recria a tabela.
     * 
     * <p>Esta migra√ß√£o √© executada de forma segura, garantindo que a tabela
     * tenha a estrutura correta com a coluna last_sync_date.</p>
     */
    public void ensureIntegrationSyncStatusTable() {
        if (tableExists("INTEGRATION_SYNC_STATUS")) {
            if (hasCorrectColumnStructure()) {
                log.info("‚úÖ Tabela INTEGRATION_SYNC_STATUS j√° existe com estrutura correta");
                return;
            } else {
                log.warn("‚ö†Ô∏è Tabela INTEGRATION_SYNC_STATUS existe mas com estrutura incorreta. Recriando...");
                dropAndRecreateTable();
                return;
            }
        }

        log.info("üîß Criando tabela INTEGRATION_SYNC_STATUS...");
        createTableWithCorrectStructure();
    }

    /**
     * Verifica se a tabela integration_sync_status tem a estrutura correta.
     * 
     * @return true se a tabela tem a coluna last_sync_date, false caso contr√°rio
     */
    private boolean hasCorrectColumnStructure() {
        try (Connection connection = dataSource.getConnection()) {
            DatabaseMetaData metaData = connection.getMetaData();
            ResultSet columns = metaData.getColumns(null, null, "INTEGRATION_SYNC_STATUS", "LAST_SYNC_DATE");
            boolean hasCorrectColumn = columns.next();
            columns.close();
            return hasCorrectColumn;
        } catch (Exception e) {
            log.warn("Erro ao verificar estrutura da tabela: {}", e.getMessage());
            return false;
        }
    }

    /**
     * Remove e recria a tabela integration_sync_status com a estrutura correta.
     */
    private void dropAndRecreateTable() {
        try {
            log.info("üîß Removendo tabela INTEGRATION_SYNC_STATUS existente...");
            
            // Tentar remover a tabela (pode falhar se n√£o existir, mas isso √© OK)
            try {
                String dropTableSql = "DROP TABLE integration_sync_status";
                if (jdbcTemplate != null) {
                    jdbcTemplate.execute(dropTableSql);
                } else {
                    try (Connection connection = dataSource.getConnection()) {
                        connection.createStatement().execute(dropTableSql);
                    }
                }
                log.info("‚úÖ Tabela removida com sucesso");
            } catch (Exception dropException) {
                // Se a tabela n√£o existir, isso √© normal
                log.debug("‚ÑπÔ∏è Tabela n√£o existia ou n√£o p√¥de ser removida: {}", dropException.getMessage());
            }
            
            log.info("‚úÖ Tabela removida. Criando nova tabela com estrutura correta...");
            createTableWithCorrectStructure();
            
        } catch (Exception e) {
            log.error("‚ùå Erro ao recriar tabela INTEGRATION_SYNC_STATUS: {}", e.getMessage(), e);
            // N√£o lan√ßar exce√ß√£o para n√£o causar rollback da transa√ß√£o principal
            log.warn("Tabela INTEGRATION_SYNC_STATUS n√£o p√¥de ser recriada, mas a opera√ß√£o principal continuar√°");
        }
    }

    /**
     * Cria a tabela integration_sync_status com a estrutura correta.
     */
    private void createTableWithCorrectStructure() {
        try {
            String createTableSql = """
                CREATE TABLE integration_sync_status (
                    id BIGINT AUTO_INCREMENT PRIMARY KEY,
                    card_id BIGINT NOT NULL,
                    integration_type VARCHAR(50) NOT NULL,
                    external_id VARCHAR(255),
                    sync_status VARCHAR(20) NOT NULL DEFAULT 'PENDING',
                    last_sync_date TIMESTAMP,
                    error_message TEXT,
                    retry_count INTEGER DEFAULT 0,
                    max_retries INTEGER DEFAULT 3,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    
                    FOREIGN KEY (card_id) REFERENCES cards(id) ON DELETE CASCADE,
                    UNIQUE (card_id, integration_type)
                )
                """;

            if (jdbcTemplate != null) {
                jdbcTemplate.execute(createTableSql);
            } else {
                try (Connection connection = dataSource.getConnection()) {
                    connection.createStatement().execute(createTableSql);
                }
            }

            // Criar √≠ndices
            createIndexes();
            log.info("‚úÖ Tabela INTEGRATION_SYNC_STATUS criada com estrutura correta");
            
        } catch (Exception e) {
            log.error("‚ùå Erro ao criar tabela INTEGRATION_SYNC_STATUS: {}", e.getMessage(), e);
            // N√£o lan√ßar exce√ß√£o para n√£o causar rollback da transa√ß√£o principal
            log.warn("Tabela INTEGRATION_SYNC_STATUS n√£o p√¥de ser criada, mas a opera√ß√£o principal continuar√°");
        }
    }

    /**
     * Cria os √≠ndices necess√°rios para a tabela integration_sync_status.
     */
    private void createIndexes() {
        List<String> indexQueries = List.of(
            "CREATE INDEX idx_integration_sync_card_id ON integration_sync_status(card_id)",
            "CREATE INDEX idx_integration_sync_type ON integration_sync_status(integration_type)",
            "CREATE INDEX idx_integration_sync_status ON integration_sync_status(sync_status)",
            "CREATE INDEX idx_integration_sync_last_sync ON integration_sync_status(last_sync_date)"
        );

        for (String indexQuery : indexQueries) {
            try {
                if (jdbcTemplate != null) {
                    jdbcTemplate.execute(indexQuery);
                } else {
                    try (Connection connection = dataSource.getConnection()) {
                        connection.createStatement().execute(indexQuery);
                    }
                }
                log.debug("‚úÖ √çndice criado: {}", indexQuery);
            } catch (Exception e) {
                // Verificar se o erro √© porque o √≠ndice j√° existe
                if (e.getMessage() != null && e.getMessage().toLowerCase().contains("already exists")) {
                    log.debug("‚ÑπÔ∏è √çndice j√° existe: {}", indexQuery);
                } else {
                    log.warn("‚ö†Ô∏è Erro ao criar √≠ndice: {} - {}", indexQuery, e.getMessage());
                }
            }
        }
    }

    /**
     * Executa todas as migra√ß√µes necess√°rias de forma segura.
     * 
     * <p>Este m√©todo deve ser chamado durante a inicializa√ß√£o da aplica√ß√£o
     * para garantir que todas as tabelas necess√°rias existam.</p>
     */
    public void runSafeMigrations() {
        log.info("üîß Iniciando migra√ß√µes seguras do banco de dados...");
        
        try {
            ensureIntegrationSyncStatusTable();
            log.info("‚úÖ Todas as migra√ß√µes foram executadas com sucesso");
        } catch (Exception e) {
            log.error("‚ùå Erro durante as migra√ß√µes: {}", e.getMessage(), e);
            // N√£o re-lan√ßar exce√ß√£o para n√£o causar rollback da transa√ß√£o principal
            log.warn("Algumas migra√ß√µes falharam, mas a opera√ß√£o principal continuar√°");
        }
    }

    /**
     * Lista todas as tabelas existentes no banco de dados.
     * 
     * @return lista de nomes das tabelas
     */
    public List<String> listExistingTables() {
        List<String> tables = new ArrayList<>();
        try (Connection connection = dataSource.getConnection()) {
            DatabaseMetaData metaData = connection.getMetaData();
            ResultSet resultSet = metaData.getTables(null, null, "%", new String[]{"TABLE"});
            
            while (resultSet.next()) {
                tables.add(resultSet.getString("TABLE_NAME"));
            }
            resultSet.close();
        } catch (Exception e) {
            log.warn("Erro ao listar tabelas: {}", e.getMessage());
        }
        return tables;
    }
}