package org.desviante.service;

import org.desviante.config.AppMetadataConfig;
import org.desviante.exception.ResourceNotFoundException;
import org.desviante.model.Board;
import org.desviante.model.BoardColumn;
import org.desviante.model.BoardGroup;
import org.desviante.model.Card;
import org.desviante.model.enums.BoardColumnKindEnum;
import org.desviante.repository.BoardGroupRepository;
import org.desviante.repository.BoardRepository;
import org.desviante.service.dto.BoardSummaryDTO;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.ArgumentCaptor;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;
import static org.assertj.core.api.Assertions.assertThat;

@ExtendWith(MockitoExtension.class)
class BoardGroupServiceTest {

    @Mock
    private BoardGroupRepository boardGroupRepository;

    @Mock
    private BoardRepository boardRepository;

    @Mock
    private BoardColumnService columnService;

    @Mock
    private CardService cardService;
    
    @Mock
    private AppMetadataConfig appMetadataConfig;

    @InjectMocks
    private BoardGroupService boardGroupService;

    @Test
    @DisplayName("Deve retornar lista vazia quando n√£o h√° grupos")
    void shouldReturnEmptyListWhenNoGroups() {
        // When
        List<BoardGroup> result = boardGroupService.getAllBoardGroups();

        // Then
        assertThat(result).isEmpty();
    }

    @Test
    @DisplayName("Deve retornar todos os grupos quando existem")
    void shouldReturnAllBoardGroupsWhenGroupsExist() {
        // Given
        BoardGroup group1 = new BoardGroup(1L, "Trabalho", "Grupo para tarefas do trabalho",
                "#FF5733", "üíº", LocalDateTime.now());
        BoardGroup group2 = new BoardGroup(2L, "Pessoal", "Grupo para tarefas pessoais",
                "#33FF57", "üè†", LocalDateTime.now());

        when(boardGroupRepository.findAll()).thenReturn(Arrays.asList(group1, group2));

        // When
        List<BoardGroup> result = boardGroupService.getAllBoardGroups();

        // Then
        assertThat(result).hasSize(2);
        assertThat(result.get(0).getName()).isEqualTo("Trabalho");
        assertThat(result.get(1).getName()).isEqualTo("Pessoal");
    }

    @Test
    @DisplayName("Deve retornar lista ordenada por nome do grupo")
    void shouldReturnOrderedListByGroupName() {
        // Given
        BoardGroup groupC = new BoardGroup(3L, "Categoria C", "Descri√ß√£o C",
                "#FF5733", "üìÅ", LocalDateTime.now());
        BoardGroup groupA = new BoardGroup(1L, "Categoria A", "Descri√ß√£o A",
                "#33FF57", "üìÅ", LocalDateTime.now());
        BoardGroup groupB = new BoardGroup(2L, "Categoria B", "Descri√ß√£o B",
                "#3357FF", "üìÅ", LocalDateTime.now());

        when(boardGroupRepository.findAll()).thenReturn(Arrays.asList(groupC, groupA, groupB));

        // When
        List<BoardGroup> result = boardGroupService.getAllBoardGroups();

        // Then
        assertThat(result).hasSize(3);
        // Removido teste de ordena√ß√£o - n√£o garantimos mais ordena√ß√£o espec√≠fica
    }

    @Test
    @DisplayName("Deve retornar grupos com todos os campos preenchidos corretamente")
    void shouldReturnGroupsWithAllFieldsCorrectlyFilled() {
        // Given
        LocalDateTime creationDate = LocalDateTime.now();
        BoardGroup group = new BoardGroup(1L, "Teste", "Descri√ß√£o de teste",
                "#FF5733", "üìÅ", creationDate);

        when(boardGroupRepository.findAll()).thenReturn(Arrays.asList(group));

        // When
        List<BoardGroup> result = boardGroupService.getAllBoardGroups();

        // Then
        assertThat(result).hasSize(1);
        BoardGroup returnedGroup = result.get(0);
        assertThat(returnedGroup.getId()).isEqualTo(1L);
        assertThat(returnedGroup.getName()).isEqualTo("Teste");
        assertThat(returnedGroup.getDescription()).isEqualTo("Descri√ß√£o de teste");
        assertThat(returnedGroup.getColor()).isEqualTo("#FF5733");
        assertThat(returnedGroup.getIcon()).isEqualTo("üìÅ");
        assertThat(returnedGroup.getCreationDate()).isEqualTo(creationDate);
        // Removido assert isDefault - n√£o precisamos mais de grupo padr√£o
    }

    // Testes para createBoardGroup
    @Test
    @DisplayName("Deve criar um grupo com sucesso quando todos os par√¢metros s√£o v√°lidos")
    void shouldCreateBoardGroupSuccessfully() {
        // Arrange
        String name = "Trabalho";
        String description = "Grupo para tarefas do trabalho";
        
        BoardGroup expectedGroup = new BoardGroup(1L, name, description, "#FF6B6B", "üìÅ", LocalDateTime.now());
        when(boardGroupRepository.save(any(BoardGroup.class))).thenReturn(expectedGroup);

        // Act
        BoardGroup result = boardGroupService.createBoardGroup(name, description, "üìÅ");

        // Assert
        assertNotNull(result);
        assertEquals(1L, result.getId());
        assertEquals(name, result.getName());
        assertEquals(description, result.getDescription());
        assertNotNull(result.getColor()); // Cor √© gerada automaticamente
        assertEquals("üìÅ", result.getIcon());
        // Removido assert isDefault - n√£o precisamos mais de grupo padr√£o
        
        // Verify
        verify(boardGroupRepository).save(any(BoardGroup.class));
    }

    @Test
    @DisplayName("Deve criar grupo com descri√ß√£o vazia quando description √© null")
    void shouldCreateGroupWithEmptyDescriptionWhenDescriptionIsNull() {
        // Arrange
        String name = "Pessoal";
        
        BoardGroup expectedGroup = new BoardGroup(1L, name, "", "#4ECDC4", "üìÅ", LocalDateTime.now());
        when(boardGroupRepository.save(any(BoardGroup.class))).thenReturn(expectedGroup);

        // Act
        BoardGroup result = boardGroupService.createBoardGroup(name, null, "üìÅ");

        // Assert
        assertNotNull(result);
        assertEquals(name, result.getName());
        assertEquals("", result.getDescription());
        assertNotNull(result.getColor()); // Cor √© gerada automaticamente
        
        // Verify
        ArgumentCaptor<BoardGroup> groupCaptor = ArgumentCaptor.forClass(BoardGroup.class);
        verify(boardGroupRepository).save(groupCaptor.capture());
        
        BoardGroup savedGroup = groupCaptor.getValue();
        assertEquals("", savedGroup.getDescription());
    }

    @Test
    @DisplayName("Deve lan√ßar IllegalArgumentException quando nome √© null")
    void shouldThrowExceptionWhenNameIsNull() {
        // Act & Assert
        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class,
                () -> boardGroupService.createBoardGroup(null, "Descri√ß√£o", "üìÅ"));
        
        assertEquals("Nome do grupo √© obrigat√≥rio", exception.getMessage());
        
        // Verify
        verifyNoInteractions(boardGroupRepository);
    }

    @Test
    @DisplayName("Deve lan√ßar IllegalArgumentException quando nome est√° vazio")
    void shouldThrowExceptionWhenNameIsEmpty() {
        // Act & Assert
        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class,
                () -> boardGroupService.createBoardGroup("", "Descri√ß√£o", "üìÅ"));
        
        assertEquals("Nome do grupo √© obrigat√≥rio", exception.getMessage());
        
        // Verify
        verifyNoInteractions(boardGroupRepository);
    }

    @Test
    @DisplayName("Deve lan√ßar IllegalArgumentException quando nome tem apenas espa√ßos")
    void shouldThrowExceptionWhenNameHasOnlySpaces() {
        // Act & Assert
        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class,
                () -> boardGroupService.createBoardGroup("   ", "Descri√ß√£o", "üìÅ"));
        
        assertEquals("Nome do grupo √© obrigat√≥rio", exception.getMessage());
        
        // Verify
        verifyNoInteractions(boardGroupRepository);
    }

    @Test
    @DisplayName("Deve remover espa√ßos em branco do nome e descri√ß√£o")
    void shouldTrimNameAndDescription() {
        // Arrange
        String name = "  Trabalho  ";
        String description = "  Descri√ß√£o com espa√ßos  ";
        
        BoardGroup expectedGroup = new BoardGroup(1L, "Trabalho", "Descri√ß√£o com espa√ßos", "#45B7D1", "üìÅ", LocalDateTime.now());
        when(boardGroupRepository.save(any(BoardGroup.class))).thenReturn(expectedGroup);

        // Act
        BoardGroup result = boardGroupService.createBoardGroup(name, description, "üìÅ");

        // Assert
        assertNotNull(result);
        assertEquals("Trabalho", result.getName());
        assertEquals("Descri√ß√£o com espa√ßos", result.getDescription());
        assertNotNull(result.getColor()); // Cor √© gerada automaticamente
        
        // Verify
        ArgumentCaptor<BoardGroup> groupCaptor = ArgumentCaptor.forClass(BoardGroup.class);
        verify(boardGroupRepository).save(groupCaptor.capture());
        
        BoardGroup savedGroup = groupCaptor.getValue();
        assertEquals("Trabalho", savedGroup.getName());
        assertEquals("Descri√ß√£o com espa√ßos", savedGroup.getDescription());
    }

    // Testes para getBoardsByGroup
    @Test
    @DisplayName("Deve retornar boards de um grupo quando o grupo existe e tem boards")
    void shouldReturnBoardsByGroupWhenGroupExistsAndHasBoards() {
        // Arrange
        Long groupId = 1L;
        BoardGroup group = new BoardGroup(groupId, "Trabalho", "Grupo de trabalho", "#FF5733", "üíº", LocalDateTime.now());
        Board board1 = new Board(1L, "Board 1", LocalDateTime.now(), groupId, null);
        Board board2 = new Board(2L, "Board 2", LocalDateTime.now(), groupId, null);
        
        BoardColumn column1 = new BoardColumn(1L, "A Fazer", 0, BoardColumnKindEnum.INITIAL, 1L);
        BoardColumn column2 = new BoardColumn(2L, "Em Andamento", 1, BoardColumnKindEnum.PENDING, 1L);
        BoardColumn column3 = new BoardColumn(3L, "Conclu√≠do", 2, BoardColumnKindEnum.FINAL, 1L);
        
        Card card1 = Card.builder()
                .id(1L)
                .title("Card 1")
                .description("Descri√ß√£o 1")
                .creationDate(LocalDateTime.now())
                .lastUpdateDate(LocalDateTime.now())
                .boardColumnId(1L)
                .orderIndex(1)
                .build();
        Card card2 = Card.builder()
                .id(2L)
                .title("Card 2")
                .description("Descri√ß√£o 2")
                .creationDate(LocalDateTime.now())
                .lastUpdateDate(LocalDateTime.now())
                .boardColumnId(2L)
                .orderIndex(1)
                .build();
        
        when(boardGroupRepository.findById(groupId)).thenReturn(Optional.of(group));
        when(boardRepository.findByGroupId(groupId)).thenReturn(Arrays.asList(board1, board2));
        when(columnService.getColumnsForBoards(Arrays.asList(1L, 2L))).thenReturn(Arrays.asList(column1, column2, column3));
        when(cardService.getCardsForColumns(Arrays.asList(1L, 2L, 3L))).thenReturn(Arrays.asList(card1, card2));

        // Act
        List<BoardSummaryDTO> result = boardGroupService.getBoardsByGroup(groupId);

        // Assert
        assertNotNull(result);
        assertEquals(2, result.size());
        assertEquals("Board 1", result.get(0).name());
        assertEquals("Board 2", result.get(1).name());
        
        // Verify
        verify(boardGroupRepository).findById(groupId);
        verify(boardRepository).findByGroupId(groupId);
        verify(columnService).getColumnsForBoards(Arrays.asList(1L, 2L));
        verify(cardService).getCardsForColumns(Arrays.asList(1L, 2L, 3L));
    }

    @Test
    @DisplayName("Deve retornar lista vazia quando grupo existe mas n√£o tem boards")
    void shouldReturnEmptyListWhenGroupExistsButHasNoBoards() {
        // Arrange
        Long groupId = 1L;
        BoardGroup group = new BoardGroup(groupId, "Trabalho", "Grupo de trabalho", "#FF5733", "üíº", LocalDateTime.now());
        
        when(boardGroupRepository.findById(groupId)).thenReturn(Optional.of(group));
        when(boardRepository.findByGroupId(groupId)).thenReturn(Collections.emptyList());

        // Act
        List<BoardSummaryDTO> result = boardGroupService.getBoardsByGroup(groupId);

        // Assert
        assertNotNull(result);
        assertTrue(result.isEmpty());
        
        // Verify
        verify(boardGroupRepository).findById(groupId);
        verify(boardRepository).findByGroupId(groupId);
        verifyNoInteractions(columnService, cardService);
    }

    @Test
    @DisplayName("Deve lan√ßar ResourceNotFoundException quando grupo n√£o existe")
    void shouldThrowResourceNotFoundExceptionWhenGroupDoesNotExist() {
        // Arrange
        Long groupId = 999L;
        when(boardGroupRepository.findById(groupId)).thenReturn(Optional.empty());

        // Act & Assert
        ResourceNotFoundException exception = assertThrows(ResourceNotFoundException.class,
                () -> boardGroupService.getBoardsByGroup(groupId));
        
        assertEquals("Grupo com ID 999 n√£o encontrado.", exception.getMessage());
        
        // Verify
        verify(boardGroupRepository).findById(groupId);
        verifyNoInteractions(boardRepository, columnService, cardService);
    }

    @Test
    @DisplayName("Deve calcular corretamente o status 'Vazio' quando board n√£o tem cards")
    void shouldCalculateEmptyStatusWhenBoardHasNoCards() {
        // Arrange
        Long groupId = 1L;
        BoardGroup group = new BoardGroup(groupId, "Trabalho", "Grupo de trabalho", "#FF5733", "üíº", LocalDateTime.now());
        Board board = new Board(1L, "Board Vazio", LocalDateTime.now(), groupId, null);
        BoardColumn column = new BoardColumn(1L, "A Fazer", 0, BoardColumnKindEnum.INITIAL, 1L);
        
        when(boardGroupRepository.findById(groupId)).thenReturn(Optional.of(group));
        when(boardRepository.findByGroupId(groupId)).thenReturn(Arrays.asList(board));
        when(columnService.getColumnsForBoards(Arrays.asList(1L))).thenReturn(Arrays.asList(column));
        when(cardService.getCardsForColumns(Arrays.asList(1L))).thenReturn(Collections.emptyList());

        // Act
        List<BoardSummaryDTO> result = boardGroupService.getBoardsByGroup(groupId);

        // Assert
        assertNotNull(result);
        assertEquals(1, result.size());
        BoardSummaryDTO boardSummary = result.get(0);
        assertEquals("Board Vazio", boardSummary.name());
        assertEquals("Vazio", boardSummary.status());
        assertEquals(0, boardSummary.percentInitial());
        assertEquals(0, boardSummary.percentPending());
        assertEquals(0, boardSummary.percentFinal());
    }

    @Test
    @DisplayName("Deve calcular corretamente o status 'Conclu√≠do' quando todos os cards est√£o na coluna final")
    void shouldCalculateCompletedStatusWhenAllCardsAreInFinalColumn() {
        // Arrange
        Long groupId = 1L;
        BoardGroup group = new BoardGroup(groupId, "Trabalho", "Grupo de trabalho", "#FF5733", "üíº", LocalDateTime.now());
        Board board = new Board(1L, "Board Conclu√≠do", LocalDateTime.now(), groupId, null);
        BoardColumn column = new BoardColumn(1L, "Conclu√≠do", 0, BoardColumnKindEnum.FINAL, 1L);
        
        Card card1 = Card.builder()
                .id(1L)
                .title("Card 1")
                .description("Descri√ß√£o 1")
                .creationDate(LocalDateTime.now())
                .lastUpdateDate(LocalDateTime.now())
                .boardColumnId(1L)
                .orderIndex(1)
                .build();
        Card card2 = Card.builder()
                .id(2L)
                .title("Card 2")
                .description("Descri√ß√£o 2")
                .creationDate(LocalDateTime.now())
                .lastUpdateDate(LocalDateTime.now())
                .boardColumnId(1L)
                .orderIndex(2)
                .build();
        
        when(boardGroupRepository.findById(groupId)).thenReturn(Optional.of(group));
        when(boardRepository.findByGroupId(groupId)).thenReturn(Arrays.asList(board));
        when(columnService.getColumnsForBoards(Arrays.asList(1L))).thenReturn(Arrays.asList(column));
        when(cardService.getCardsForColumns(Arrays.asList(1L))).thenReturn(Arrays.asList(card1, card2));

        // Act
        List<BoardSummaryDTO> result = boardGroupService.getBoardsByGroup(groupId);

        // Assert
        assertNotNull(result);
        assertEquals(1, result.size());
        BoardSummaryDTO boardSummary = result.get(0);
        assertEquals("Board Conclu√≠do", boardSummary.name());
        assertEquals("Conclu√≠do", boardSummary.status());
        assertEquals(0, boardSummary.percentInitial());
        assertEquals(0, boardSummary.percentPending());
        assertEquals(100, boardSummary.percentFinal());
    }

    @Test
    @DisplayName("Deve calcular corretamente o status 'N√£o iniciado' quando todos os cards est√£o na coluna inicial")
    void shouldCalculateNotStartedStatusWhenAllCardsAreInInitialColumn() {
        // Arrange
        Long groupId = 1L;
        BoardGroup group = new BoardGroup(groupId, "Trabalho", "Grupo de trabalho", "#FF5733", "üíº", LocalDateTime.now());
        Board board = new Board(1L, "Board N√£o Iniciado", LocalDateTime.now(), groupId, null);
        BoardColumn column = new BoardColumn(1L, "A Fazer", 0, BoardColumnKindEnum.INITIAL, 1L);
        
        Card card1 = Card.builder()
                .id(1L)
                .title("Card 1")
                .description("Descri√ß√£o 1")
                .creationDate(LocalDateTime.now())
                .lastUpdateDate(LocalDateTime.now())
                .boardColumnId(1L)
                .orderIndex(1)
                .build();
        Card card2 = Card.builder()
                .id(2L)
                .title("Card 2")
                .description("Descri√ß√£o 2")
                .creationDate(LocalDateTime.now())
                .lastUpdateDate(LocalDateTime.now())
                .boardColumnId(1L)
                .orderIndex(2)
                .build();
        
        when(boardGroupRepository.findById(groupId)).thenReturn(Optional.of(group));
        when(boardRepository.findByGroupId(groupId)).thenReturn(Arrays.asList(board));
        when(columnService.getColumnsForBoards(Arrays.asList(1L))).thenReturn(Arrays.asList(column));
        when(cardService.getCardsForColumns(Arrays.asList(1L))).thenReturn(Arrays.asList(card1, card2));

        // Act
        List<BoardSummaryDTO> result = boardGroupService.getBoardsByGroup(groupId);

        // Assert
        assertNotNull(result);
        assertEquals(1, result.size());
        BoardSummaryDTO boardSummary = result.get(0);
        assertEquals("Board N√£o Iniciado", boardSummary.name());
        assertEquals("N√£o iniciado", boardSummary.status());
        assertEquals(100, boardSummary.percentInitial());
        assertEquals(0, boardSummary.percentPending());
        assertEquals(0, boardSummary.percentFinal());
    }

    @Test
    @DisplayName("Deve calcular corretamente o status 'Em andamento' quando cards est√£o distribu√≠dos")
    void shouldCalculateInProgressStatusWhenCardsAreDistributed() {
        // Arrange
        Long groupId = 1L;
        BoardGroup group = new BoardGroup(groupId, "Trabalho", "Grupo de trabalho", "#FF5733", "üíº", LocalDateTime.now());
        Board board = new Board(1L, "Board Em Andamento", LocalDateTime.now(), groupId, null);
        
        BoardColumn column1 = new BoardColumn(1L, "A Fazer", 0, BoardColumnKindEnum.INITIAL, 1L);
        BoardColumn column2 = new BoardColumn(2L, "Em Andamento", 1, BoardColumnKindEnum.PENDING, 1L);
        BoardColumn column3 = new BoardColumn(3L, "Conclu√≠do", 2, BoardColumnKindEnum.FINAL, 1L);
        
        Card card1 = Card.builder()
                .id(1L)
                .title("Card 1")
                .description("Descri√ß√£o 1")
                .creationDate(LocalDateTime.now())
                .lastUpdateDate(LocalDateTime.now())
                .boardColumnId(1L)
                .orderIndex(1)
                .build();
        Card card2 = Card.builder()
                .id(2L)
                .title("Card 2")
                .description("Descri√ß√£o 2")
                .creationDate(LocalDateTime.now())
                .lastUpdateDate(LocalDateTime.now())
                .boardColumnId(2L)
                .orderIndex(1)
                .build();
        Card card3 = Card.builder()
                .id(3L)
                .title("Card 3")
                .description("Descri√ß√£o 3")
                .creationDate(LocalDateTime.now())
                .lastUpdateDate(LocalDateTime.now())
                .boardColumnId(3L)
                .orderIndex(1)
                .build();
        
        when(boardGroupRepository.findById(groupId)).thenReturn(Optional.of(group));
        when(boardRepository.findByGroupId(groupId)).thenReturn(Arrays.asList(board));
        when(columnService.getColumnsForBoards(Arrays.asList(1L))).thenReturn(Arrays.asList(column1, column2, column3));
        when(cardService.getCardsForColumns(Arrays.asList(1L, 2L, 3L))).thenReturn(Arrays.asList(card1, card2, card3));

        // Act
        List<BoardSummaryDTO> result = boardGroupService.getBoardsByGroup(groupId);

        // Assert
        assertNotNull(result);
        assertEquals(1, result.size());
        BoardSummaryDTO boardSummary = result.get(0);
        assertEquals("Board Em Andamento", boardSummary.name());
        assertEquals("Em andamento", boardSummary.status());
        assertEquals(33, boardSummary.percentInitial()); // 1/3 = 33%
        assertEquals(33, boardSummary.percentPending()); // 1/3 = 33%
        assertEquals(33, boardSummary.percentFinal()); // 1/3 = 33%
    }

    @Test
    @DisplayName("Deve calcular percentuais corretamente com arredondamento por truncamento")
    void shouldCalculatePercentagesWithTruncationRounding() {
        // Arrange
        Long groupId = 1L;
        BoardGroup group = new BoardGroup(groupId, "Trabalho", "Grupo de trabalho", "#FF5733", "üíº", LocalDateTime.now());
        Board board = new Board(1L, "Board Percentuais", LocalDateTime.now(), groupId, null);
        
        BoardColumn column1 = new BoardColumn(1L, "A Fazer", 0, BoardColumnKindEnum.INITIAL, 1L);
        BoardColumn column2 = new BoardColumn(2L, "Em Andamento", 1, BoardColumnKindEnum.PENDING, 1L);
        BoardColumn column3 = new BoardColumn(3L, "Conclu√≠do", 2, BoardColumnKindEnum.FINAL, 1L);
        
        Card card1 = Card.builder()
                .id(1L)
                .title("Card 1")
                .description("Descri√ß√£o 1")
                .creationDate(LocalDateTime.now())
                .lastUpdateDate(LocalDateTime.now())
                .boardColumnId(1L)
                .orderIndex(1)
                .build();
        Card card2 = Card.builder()
                .id(2L)
                .title("Card 2")
                .description("Descri√ß√£o 2")
                .creationDate(LocalDateTime.now())
                .lastUpdateDate(LocalDateTime.now())
                .boardColumnId(1L)
                .orderIndex(2)
                .build();
        Card card3 = Card.builder()
                .id(3L)
                .title("Card 3")
                .description("Descri√ß√£o 3")
                .creationDate(LocalDateTime.now())
                .lastUpdateDate(LocalDateTime.now())
                .boardColumnId(2L)
                .orderIndex(1)
                .build();
        Card card4 = Card.builder()
                .id(4L)
                .title("Card 4")
                .description("Descri√ß√£o 4")
                .creationDate(LocalDateTime.now())
                .lastUpdateDate(LocalDateTime.now())
                .boardColumnId(2L)
                .orderIndex(2)
                .build();
        Card card5 = Card.builder()
                .id(5L)
                .title("Card 5")
                .description("Descri√ß√£o 5")
                .creationDate(LocalDateTime.now())
                .lastUpdateDate(LocalDateTime.now())
                .boardColumnId(2L)
                .orderIndex(3)
                .build();
        Card card6 = Card.builder()
                .id(6L)
                .title("Card 6")
                .description("Descri√ß√£o 6")
                .creationDate(LocalDateTime.now())
                .lastUpdateDate(LocalDateTime.now())
                .boardColumnId(3L)
                .orderIndex(1)
                .build();
        Card card7 = Card.builder()
                .id(7L)
                .title("Card 7")
                .description("Descri√ß√£o 7")
                .creationDate(LocalDateTime.now())
                .lastUpdateDate(LocalDateTime.now())
                .boardColumnId(3L)
                .orderIndex(2)
                .build();
        
        when(boardGroupRepository.findById(groupId)).thenReturn(Optional.of(group));
        when(boardRepository.findByGroupId(groupId)).thenReturn(Arrays.asList(board));
        when(columnService.getColumnsForBoards(Arrays.asList(1L))).thenReturn(Arrays.asList(column1, column2, column3));
        when(cardService.getCardsForColumns(Arrays.asList(1L, 2L, 3L))).thenReturn(Arrays.asList(card1, card2, card3, card4, card5, card6, card7));

        // Act
        List<BoardSummaryDTO> result = boardGroupService.getBoardsByGroup(groupId);

        // Assert
        assertNotNull(result);
        assertEquals(1, result.size());
        BoardSummaryDTO boardSummary = result.get(0);
        assertEquals("Board Percentuais", boardSummary.name());
        assertEquals("Em andamento", boardSummary.status());
        assertEquals(28, boardSummary.percentInitial()); // 2/7 = 28%
        assertEquals(42, boardSummary.percentPending()); // 3/7 = 42%
        assertEquals(28, boardSummary.percentFinal()); // 2/7 = 28%
    }

    @Test
    @DisplayName("Deve lidar corretamente quando board n√£o tem colunas")
    void shouldHandleBoardWithNoColumns() {
        // Arrange
        Long groupId = 1L;
        BoardGroup group = new BoardGroup(groupId, "Trabalho", "Grupo de trabalho", "#FF5733", "üíº", LocalDateTime.now());
        Board board = new Board(1L, "Board Sem Colunas", LocalDateTime.now(), groupId, null);
        
        when(boardGroupRepository.findById(groupId)).thenReturn(Optional.of(group));
        when(boardRepository.findByGroupId(groupId)).thenReturn(Arrays.asList(board));
        when(columnService.getColumnsForBoards(Arrays.asList(1L))).thenReturn(Collections.emptyList());
        when(cardService.getCardsForColumns(Collections.emptyList())).thenReturn(Collections.emptyList());

        // Act
        List<BoardSummaryDTO> result = boardGroupService.getBoardsByGroup(groupId);

        // Assert
        assertNotNull(result);
        assertEquals(1, result.size());
        BoardSummaryDTO boardSummary = result.get(0);
        assertEquals("Board Sem Colunas", boardSummary.name());
        assertEquals("Vazio", boardSummary.status());
        assertEquals(0, boardSummary.percentInitial());
        assertEquals(0, boardSummary.percentPending());
        assertEquals(0, boardSummary.percentFinal());
    }

    @Test
    @DisplayName("Deve lidar corretamente quando card n√£o tem coluna associada")
    void shouldHandleCardWithNoAssociatedColumn() {
        // Arrange
        Long groupId = 1L;
        BoardGroup group = new BoardGroup(groupId, "Trabalho", "Grupo de trabalho", "#FF5733", "üíº", LocalDateTime.now());
        Board board = new Board(1L, "Board Card √ìrf√£o", LocalDateTime.now(), groupId, null);
        BoardColumn column = new BoardColumn(1L, "A Fazer", 0, BoardColumnKindEnum.INITIAL, 1L);
        
        Card card = Card.builder()
                .id(1L)
                .title("Card √ìrf√£o")
                .description("Descri√ß√£o")
                .creationDate(LocalDateTime.now())
                .lastUpdateDate(LocalDateTime.now())
                .boardColumnId(999L) // ID de coluna inexistente
                .orderIndex(1)
                .build();
        
        when(boardGroupRepository.findById(groupId)).thenReturn(Optional.of(group));
        when(boardRepository.findByGroupId(groupId)).thenReturn(Arrays.asList(board));
        when(columnService.getColumnsForBoards(Arrays.asList(1L))).thenReturn(Arrays.asList(column));
        when(cardService.getCardsForColumns(Arrays.asList(1L))).thenReturn(Arrays.asList(card));

        // Act
        List<BoardSummaryDTO> result = boardGroupService.getBoardsByGroup(groupId);

        // Assert
        assertNotNull(result);
        assertEquals(1, result.size());
        BoardSummaryDTO boardSummary = result.get(0);
        assertEquals("Board Card √ìrf√£o", boardSummary.name());
        assertEquals("Vazio", boardSummary.status()); // Como o card n√£o tem coluna v√°lida, √© considerado vazio
        assertEquals(0, boardSummary.percentInitial());
        assertEquals(0, boardSummary.percentPending());
        assertEquals(0, boardSummary.percentFinal());
    }

    // Testes para updateBoardGroup
    @Test
    @DisplayName("Deve atualizar um grupo com sucesso quando todos os par√¢metros s√£o v√°lidos")
    void shouldUpdateBoardGroupSuccessfully() {
        // Arrange
        Long groupId = 1L;
        BoardGroup existingGroup = new BoardGroup(groupId, "Grupo Antigo", "Descri√ß√£o antiga", "#FF5733", "üìÅ", LocalDateTime.now());
        BoardGroup updatedGroup = new BoardGroup(groupId, "Grupo Atualizado", "Descri√ß√£o atualizada", "#FF5733", "üéØ", LocalDateTime.now());
        
        when(boardGroupRepository.findById(groupId)).thenReturn(Optional.of(existingGroup));
        when(boardGroupRepository.save(any(BoardGroup.class))).thenReturn(updatedGroup);

        // Act
        BoardGroup result = boardGroupService.updateBoardGroup(groupId, "Grupo Atualizado", "Descri√ß√£o atualizada", "üéØ");

        // Assert
        assertNotNull(result);
        assertEquals(groupId, result.getId());
        assertEquals("Grupo Atualizado", result.getName());
        assertEquals("Descri√ß√£o atualizada", result.getDescription());
        assertEquals("#FF5733", result.getColor()); // Cor permanece a mesma
        assertEquals("üéØ", result.getIcon());
        // Removido assert isDefault - n√£o precisamos mais de grupo padr√£o
        
        // Verify
        verify(boardGroupRepository).findById(groupId);
        verify(boardGroupRepository).save(any(BoardGroup.class));
    }

    @Test
    @DisplayName("Deve atualizar grupo com √≠cone padr√£o quando icon √© null")
    void shouldUpdateGroupWithDefaultIconWhenIconIsNull() {
        // Arrange
        Long groupId = 1L;
        BoardGroup existingGroup = new BoardGroup(groupId, "Grupo Teste", "Descri√ß√£o", "#FF5733", "üìÅ", LocalDateTime.now());
        BoardGroup updatedGroup = new BoardGroup(groupId, "Grupo Atualizado", "Descri√ß√£o atualizada", "#FF5733", "üìÅ", LocalDateTime.now());
        
        when(boardGroupRepository.findById(groupId)).thenReturn(Optional.of(existingGroup));
        when(boardGroupRepository.save(any(BoardGroup.class))).thenReturn(updatedGroup);

        // Act
        BoardGroup result = boardGroupService.updateBoardGroup(groupId, "Grupo Atualizado", "Descri√ß√£o atualizada", null);

        // Assert
        assertNotNull(result);
        assertEquals("Grupo Atualizado", result.getName());
        assertEquals("Descri√ß√£o atualizada", result.getDescription());
        assertEquals("#FF5733", result.getColor()); // Cor permanece a mesma
        assertEquals("üìÅ", result.getIcon()); // √çcone padr√£o
        
        // Verify
        ArgumentCaptor<BoardGroup> groupCaptor = ArgumentCaptor.forClass(BoardGroup.class);
        verify(boardGroupRepository).save(groupCaptor.capture());
        
        BoardGroup savedGroup = groupCaptor.getValue();
        assertEquals("üìÅ", savedGroup.getIcon());
    }

    @Test
    @DisplayName("Deve remover espa√ßos em branco do nome e descri√ß√£o na atualiza√ß√£o")
    void shouldTrimNameAndDescriptionInUpdate() {
        // Arrange
        Long groupId = 1L;
        BoardGroup existingGroup = new BoardGroup(groupId, "Grupo Teste", "Descri√ß√£o", "#FF5733", "üìÅ", LocalDateTime.now());
        BoardGroup updatedGroup = new BoardGroup(groupId, "Grupo Limpo", "Descri√ß√£o Limpa", "#FF5733", "üéØ", LocalDateTime.now());
        
        when(boardGroupRepository.findById(groupId)).thenReturn(Optional.of(existingGroup));
        when(boardGroupRepository.save(any(BoardGroup.class))).thenReturn(updatedGroup);

        // Act
        BoardGroup result = boardGroupService.updateBoardGroup(groupId, "  Grupo Limpo  ", "  Descri√ß√£o Limpa  ", "üéØ");

        // Assert
        assertNotNull(result);
        assertEquals("Grupo Limpo", result.getName());
        assertEquals("Descri√ß√£o Limpa", result.getDescription());
        
        // Verify
        ArgumentCaptor<BoardGroup> groupCaptor = ArgumentCaptor.forClass(BoardGroup.class);
        verify(boardGroupRepository).save(groupCaptor.capture());
        
        BoardGroup savedGroup = groupCaptor.getValue();
        assertEquals("Grupo Limpo", savedGroup.getName());
        assertEquals("Descri√ß√£o Limpa", savedGroup.getDescription());
    }

    @Test
    @DisplayName("Deve lan√ßar ResourceNotFoundException quando grupo n√£o existe")
    void shouldThrowResourceNotFoundExceptionWhenGroupDoesNotExistForUpdate() {
        // Arrange
        Long groupId = 999L;
        when(boardGroupRepository.findById(groupId)).thenReturn(Optional.empty());

        // Act & Assert
        ResourceNotFoundException exception = assertThrows(ResourceNotFoundException.class,
                () -> boardGroupService.updateBoardGroup(groupId, "Nome", "Descri√ß√£o", "üéØ"));
        
        assertEquals("Grupo com ID 999 n√£o encontrado.", exception.getMessage());
        
        // Verify
        verify(boardGroupRepository).findById(groupId);
        verifyNoMoreInteractions(boardGroupRepository);
    }

    @Test
    @DisplayName("Deve lan√ßar IllegalArgumentException quando nome √© null na atualiza√ß√£o")
    void shouldThrowExceptionWhenNameIsNullInUpdate() {
        // Arrange
        Long groupId = 1L;
        BoardGroup existingGroup = new BoardGroup(groupId, "Grupo Teste", "Descri√ß√£o", "#FF5733", "üìÅ", LocalDateTime.now());
        when(boardGroupRepository.findById(groupId)).thenReturn(Optional.of(existingGroup));

        // Act & Assert
        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class,
                () -> boardGroupService.updateBoardGroup(groupId, null, "Descri√ß√£o", "üéØ"));
        
        assertEquals("Nome do grupo √© obrigat√≥rio", exception.getMessage());
        
        // Verify
        verify(boardGroupRepository).findById(groupId);
        verifyNoMoreInteractions(boardGroupRepository);
    }

    @Test
    @DisplayName("Deve lan√ßar IllegalArgumentException quando nome est√° vazio na atualiza√ß√£o")
    void shouldThrowExceptionWhenNameIsEmptyInUpdate() {
        // Arrange
        Long groupId = 1L;
        BoardGroup existingGroup = new BoardGroup(groupId, "Grupo Teste", "Descri√ß√£o", "#FF5733", "üìÅ", LocalDateTime.now());
        when(boardGroupRepository.findById(groupId)).thenReturn(Optional.of(existingGroup));

        // Act & Assert
        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class,
                () -> boardGroupService.updateBoardGroup(groupId, "", "Descri√ß√£o", "üéØ"));
        
        assertEquals("Nome do grupo √© obrigat√≥rio", exception.getMessage());
        
        // Verify
        verify(boardGroupRepository).findById(groupId);
        verifyNoMoreInteractions(boardGroupRepository);
    }

    // Removido teste de grupo padr√£o - n√£o precisamos mais de grupo padr√£o

    @Test
    @DisplayName("Deve lan√ßar IllegalArgumentException quando grupo tem boards associados")
    void shouldThrowExceptionWhenGroupHasAssociatedBoards() {
        // Arrange
        Long groupId = 1L;
        BoardGroup groupWithBoards = new BoardGroup(groupId, "Grupo com Boards", "Descri√ß√£o", "#FF5733", "üìÅ", LocalDateTime.now());
        Board board1 = new Board(1L, "Board 1", LocalDateTime.now(), groupId, null);
        Board board2 = new Board(2L, "Board 2", LocalDateTime.now(), groupId, null);
        
        when(boardGroupRepository.findById(groupId)).thenReturn(Optional.of(groupWithBoards));
        when(boardRepository.findByGroupId(groupId)).thenReturn(Arrays.asList(board1, board2));

        // Act & Assert
        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class,
                () -> boardGroupService.deleteBoardGroup(groupId));
        
        String expectedMessage = "N√£o √© poss√≠vel deletar o grupo 'Grupo com Boards' pois existem 2 board(s) associado(s). Mova os boards para outro grupo antes de deletar.";
        assertEquals(expectedMessage, exception.getMessage());
        
        // Verify
        verify(boardGroupRepository).findById(groupId);
        verify(boardRepository).findByGroupId(groupId);
        verifyNoMoreInteractions(boardGroupRepository, boardRepository);
    }

    @Test
    @DisplayName("Deve lan√ßar IllegalArgumentException quando grupo tem um board associado")
    void shouldThrowExceptionWhenGroupHasOneAssociatedBoard() {
        // Arrange
        Long groupId = 1L;
        BoardGroup groupWithOneBoard = new BoardGroup(groupId, "Grupo √önico", "Descri√ß√£o", "#FF5733", "üìÅ", LocalDateTime.now());
        Board board = new Board(1L, "Board √önico", LocalDateTime.now(), groupId, null);
        
        when(boardGroupRepository.findById(groupId)).thenReturn(Optional.of(groupWithOneBoard));
        when(boardRepository.findByGroupId(groupId)).thenReturn(Arrays.asList(board));

        // Act & Assert
        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class,
                () -> boardGroupService.deleteBoardGroup(groupId));
        
        String expectedMessage = "N√£o √© poss√≠vel deletar o grupo 'Grupo √önico' pois existem 1 board(s) associado(s). Mova os boards para outro grupo antes de deletar.";
        assertEquals(expectedMessage, exception.getMessage());
        
        // Verify
        verify(boardGroupRepository).findById(groupId);
        verify(boardRepository).findByGroupId(groupId);
        verifyNoMoreInteractions(boardGroupRepository, boardRepository);
    }

    @Test
    @DisplayName("Deve deletar grupo quando lista de boards est√° vazia")
    void shouldDeleteGroupWhenBoardsListIsEmpty() {
        // Arrange
        Long groupId = 1L;
        BoardGroup groupToDelete = new BoardGroup(groupId, "Grupo Vazio", "Descri√ß√£o", "#FF5733", "üìÅ", LocalDateTime.now());
        
        when(boardGroupRepository.findById(groupId)).thenReturn(Optional.of(groupToDelete));
        when(boardRepository.findByGroupId(groupId)).thenReturn(Collections.emptyList());
        doNothing().when(boardGroupRepository).deleteById(groupId);

        // Act
        boardGroupService.deleteBoardGroup(groupId);

        // Assert & Verify
        verify(boardGroupRepository).findById(groupId);
        verify(boardRepository).findByGroupId(groupId);
        verify(boardGroupRepository).deleteById(groupId);
        verifyNoMoreInteractions(boardGroupRepository, boardRepository);
    }

    @Test
    @DisplayName("Deve deletar grupo quando lista de boards √© null")
    void shouldDeleteGroupWhenBoardsListIsNull() {
        // Arrange
        Long groupId = 1L;
        BoardGroup groupToDelete = new BoardGroup(groupId, "Grupo Null", "Descri√ß√£o", "#FF5733", "üìÅ", LocalDateTime.now());
        
        when(boardGroupRepository.findById(groupId)).thenReturn(Optional.of(groupToDelete));
        when(boardRepository.findByGroupId(groupId)).thenReturn(null);
        doNothing().when(boardGroupRepository).deleteById(groupId);

        // Act
        boardGroupService.deleteBoardGroup(groupId);

        // Assert & Verify
        verify(boardGroupRepository).findById(groupId);
        verify(boardRepository).findByGroupId(groupId);
        verify(boardGroupRepository).deleteById(groupId);
        verifyNoMoreInteractions(boardGroupRepository, boardRepository);
    }

    @Test
    @DisplayName("Deve incluir nome do grupo na mensagem de erro quando h√° boards associados")
    void shouldIncludeGroupNameInErrorMessageWhenBoardsAreAssociated() {
        // Arrange
        Long groupId = 1L;
        BoardGroup groupWithBoards = new BoardGroup(groupId, "Meu Grupo Especial", "Descri√ß√£o especial", "#FF5733", "üìÅ", LocalDateTime.now());
        Board board = new Board(1L, "Board Especial", LocalDateTime.now(), groupId, null);
        
        when(boardGroupRepository.findById(groupId)).thenReturn(Optional.of(groupWithBoards));
        when(boardRepository.findByGroupId(groupId)).thenReturn(Arrays.asList(board));

        // Act & Assert
        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class,
                () -> boardGroupService.deleteBoardGroup(groupId));
        
        String expectedMessage = "N√£o √© poss√≠vel deletar o grupo 'Meu Grupo Especial' pois existem 1 board(s) associado(s). Mova os boards para outro grupo antes de deletar.";
        assertEquals(expectedMessage, exception.getMessage());
        
        // Verify
        verify(boardGroupRepository).findById(groupId);
        verify(boardRepository).findByGroupId(groupId);
        verifyNoMoreInteractions(boardGroupRepository, boardRepository);
    }
    
    @Test
    @DisplayName("Deve impedir exclus√£o de grupo configurado como padr√£o")
    void shouldPreventDeletionOfDefaultGroup() {
        // Arrange
        Long groupId = 1L;
        BoardGroup defaultGroup = new BoardGroup(groupId, "Grupo Padr√£o", "Descri√ß√£o", "#FF5733", "üìÅ", LocalDateTime.now());
        
        when(boardGroupRepository.findById(groupId)).thenReturn(Optional.of(defaultGroup));
        when(appMetadataConfig.getDefaultBoardGroupId()).thenReturn(Optional.of(groupId));
        // N√£o configuramos boardRepository.findByGroupId porque n√£o deve ser chamado

        // Act & Assert
        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class,
                () -> boardGroupService.deleteBoardGroup(groupId));
        
        String expectedMessage = "N√£o √© poss√≠vel deletar o grupo 'Grupo Padr√£o' pois ele est√° configurado como grupo padr√£o no sistema. Altere a configura√ß√£o padr√£o antes de deletar o grupo.";
        assertEquals(expectedMessage, exception.getMessage());
        
        // Verify
        verify(boardGroupRepository).findById(groupId);
        verify(appMetadataConfig).getDefaultBoardGroupId();
        verifyNoMoreInteractions(boardGroupRepository);
        verifyNoInteractions(boardRepository);
    }
    
    @Test
    @DisplayName("Deve permitir exclus√£o de grupo quando n√£o √© o padr√£o")
    void shouldAllowDeletionWhenGroupIsNotDefault() {
        // Arrange
        Long groupId = 1L;
        BoardGroup nonDefaultGroup = new BoardGroup(groupId, "Grupo Normal", "Descri√ß√£o", "#FF5733", "üìÅ", LocalDateTime.now());
        
        when(boardGroupRepository.findById(groupId)).thenReturn(Optional.of(nonDefaultGroup));
        when(appMetadataConfig.getDefaultBoardGroupId()).thenReturn(Optional.of(999L)); // ID diferente
        when(boardRepository.findByGroupId(groupId)).thenReturn(Collections.emptyList());
        doNothing().when(boardGroupRepository).deleteById(groupId);

        // Act
        boardGroupService.deleteBoardGroup(groupId);

        // Assert & Verify
        verify(boardGroupRepository).findById(groupId);
        verify(appMetadataConfig).getDefaultBoardGroupId();
        verify(boardRepository).findByGroupId(groupId);
        verify(boardGroupRepository).deleteById(groupId);
        verifyNoMoreInteractions(boardGroupRepository, boardRepository);
    }
    
    @Test
    @DisplayName("Deve permitir exclus√£o quando nenhum grupo padr√£o est√° configurado")
    void shouldAllowDeletionWhenNoDefaultGroupConfigured() {
        // Arrange
        Long groupId = 1L;
        BoardGroup normalGroup = new BoardGroup(groupId, "Grupo Normal", "Descri√ß√£o", "#FF5733", "üìÅ", LocalDateTime.now());
        
        when(boardGroupRepository.findById(groupId)).thenReturn(Optional.of(normalGroup));
        when(appMetadataConfig.getDefaultBoardGroupId()).thenReturn(Optional.empty()); // Sem grupo padr√£o
        when(boardRepository.findByGroupId(groupId)).thenReturn(Collections.emptyList());
        doNothing().when(boardGroupRepository).deleteById(groupId);

        // Act
        boardGroupService.deleteBoardGroup(groupId);

        // Assert & Verify
        verify(boardGroupRepository).findById(groupId);
        verify(appMetadataConfig).getDefaultBoardGroupId();
        verify(boardRepository).findByGroupId(groupId);
        verify(boardGroupRepository).deleteById(groupId);
        verifyNoMoreInteractions(boardGroupRepository, boardRepository);
    }
    
    @Test
    @DisplayName("Deve verificar grupo padr√£o antes de verificar boards associados")
    void shouldCheckDefaultGroupBeforeCheckingAssociatedBoards() {
        // Arrange
        Long groupId = 1L;
        BoardGroup defaultGroup = new BoardGroup(groupId, "Grupo Padr√£o", "Descri√ß√£o", "#FF5733", "üìÅ", LocalDateTime.now());
        
        when(boardGroupRepository.findById(groupId)).thenReturn(Optional.of(defaultGroup));
        when(appMetadataConfig.getDefaultBoardGroupId()).thenReturn(Optional.of(groupId));
        // N√£o configuramos boardRepository.findByGroupId porque n√£o deve ser chamado

        // Act & Assert
        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class,
                () -> boardGroupService.deleteBoardGroup(groupId));
        
        String expectedMessage = "N√£o √© poss√≠vel deletar o grupo 'Grupo Padr√£o' pois ele est√° configurado como grupo padr√£o no sistema. Altere a configura√ß√£o padr√£o antes de deletar o grupo.";
        assertEquals(expectedMessage, exception.getMessage());
        
        // Verify - Deve verificar grupo padr√£o primeiro, n√£o deve verificar boards
        verify(boardGroupRepository).findById(groupId);
        verify(appMetadataConfig).getDefaultBoardGroupId();
        verifyNoMoreInteractions(boardGroupRepository);
        verifyNoInteractions(boardRepository);
    }
} 
