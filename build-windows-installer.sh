#!/bin/bash

# Script para gerar instalador Windows
# Este script cria o instalador Windows (.exe) usando jpackage

echo "=== Simple Task Board Manager - Gerador de Instalador Windows ==="
echo "Sistema: $(uname -s) $(uname -r)"
echo "Java: $(java -version 2>&1 | head -n 1)"
echo ""

# Verificar se o Gradle wrapper existe
if [ ! -f "./gradlew" ]; then
    echo "‚ùå Gradle wrapper n√£o encontrado!"
    exit 1
fi

# Tornar o gradlew execut√°vel
chmod +x ./gradlew

# Verificar se o √≠cone ICO existe
if [ ! -f "src/main/resources/icon.ico" ]; then
    echo "‚ùå √çcone ICO n√£o encontrado: src/main/resources/icon.ico"
    echo "Este arquivo √© necess√°rio para o instalador Windows"
    exit 1
fi

# Fun√ß√£o para verificar se um comando existe
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Verificar depend√™ncias
echo "üîß Verificando depend√™ncias..."

# Verificar jpackage
if ! command_exists jpackage; then
    echo "‚ùå jpackage n√£o encontrado!"
    echo "Instale o JDK 21 com jpackage:"
    echo "sudo apt install openjdk-21-jdk"
    exit 1
fi

echo "‚úÖ Depend√™ncias verificadas"

# Preservar instaladores existentes
PRESERVE_EXISTING=false
if [ -d "build/dist" ]; then
    EXISTING_INSTALLERS=$(find build/dist -type f \( -name "*.exe" -o -name "*.AppImage" -o -name "*.deb" -o -name "*.rpm" -o -name "*.snap" \))
    if [ -n "$EXISTING_INSTALLERS" ]; then
        echo "üíæ Preservando instaladores existentes..."
        mkdir -p build/dist/backup
        cp build/dist/*.exe build/dist/*.AppImage build/dist/*.deb build/dist/*.rpm build/dist/*.snap build/dist/backup/ 2>/dev/null || true
        PRESERVE_EXISTING=true
        echo "‚úÖ Instaladores preservados em build/dist/backup/"
    fi
fi

# Limpar builds anteriores (mas preservar dist se necess√°rio)
echo "üßπ Limpando builds anteriores..."
if [ "$PRESERVE_EXISTING" = true ]; then
    echo "üíæ Preservando diret√≥rio dist/ para manter instaladores existentes..."
    ./gradlew cleanClasses cleanJar
else
    ./gradlew clean
fi

# Compilar o projeto
echo "üî® Compilando o projeto..."
./gradlew compileJava

if [ $? -eq 0 ]; then
    echo "‚úÖ Compila√ß√£o bem-sucedida!"
else
    echo "‚ùå Erro na compila√ß√£o!"
    exit 1
fi

# Gerar JAR
echo "üì¶ Gerando JAR..."
./gradlew shadowJar -x test

if [ $? -eq 0 ]; then
    echo "‚úÖ JAR gerado com sucesso!"
else
    echo "‚ùå Erro na gera√ß√£o do JAR!"
    exit 1
fi

# Criar diret√≥rio de destino
mkdir -p build/dist

# Restaurar instaladores preservados
if [ "$PRESERVE_EXISTING" = true ]; then
    echo "üîÑ Restaurando instaladores preservados..."
    cp build/dist/backup/* build/dist/ 2>/dev/null || true
    echo "‚úÖ Instaladores restaurados"
fi

echo ""
echo "ü™ü Gerando instalador Windows..."

# Gerar instalador Windows
if ./gradlew jpackage --continue; then
    echo "‚úÖ Instalador Windows (.exe) criado com sucesso!"
else
    echo "‚ùå Erro ao criar instalador Windows"
    exit 1
fi

echo ""
echo "üìÅ Instalador gerado em: build/dist/"
echo ""

# Listar arquivos gerados
if [ -d "build/dist" ]; then
    echo "üìã Arquivos gerados:"
    ls -la build/dist/
    echo ""
    
    # Contar arquivos por tipo
    echo "üìä Resumo:"
    echo "Windows (.exe): $(ls build/dist/*.exe 2>/dev/null | wc -l)"
    echo "AppImage: $(ls build/dist/*.AppImage 2>/dev/null | wc -l)"
    echo "DEB: $(ls build/dist/*.deb 2>/dev/null | wc -l)"
    echo "RPM: $(ls build/dist/*.rpm 2>/dev/null | wc -l)"
    echo "Snap: $(ls build/dist/*.snap 2>/dev/null | wc -l)"
else
    echo "‚ùå Nenhum instalador foi gerado"
fi

# Limpar backup tempor√°rio
if [ "$PRESERVE_EXISTING" = true ] && [ -d "build/dist/backup" ]; then
    echo "üßπ Limpando arquivos tempor√°rios..."
    rm -rf build/dist/backup
fi

echo ""
echo "=== Instru√ß√µes de Instala√ß√£o ==="
echo ""
echo "ü™ü Windows:"
echo "  Execute o arquivo .exe diretamente"
echo "  O instalador ir√°:"
echo "    - Criar atalhos no menu Iniciar"
echo "    - Criar atalho na √°rea de trabalho"
echo "    - Instalar no diret√≥rio Program Files"
echo "    - Configurar atualiza√ß√µes autom√°ticas"
echo ""
echo "=== Build de Instalador Windows Conclu√≠do ===" 