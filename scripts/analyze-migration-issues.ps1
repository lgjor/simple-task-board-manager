# Script para analisar problemas de migra√ß√£o
# Verifica inconsist√™ncias entre schemas e identifica poss√≠veis problemas

Write-Host "üîç Analisando problemas de migra√ß√£o..." -ForegroundColor Green
Write-Host ""

# Verificar se h√° problemas de sintaxe nos scripts de migra√ß√£o
Write-Host "üìã Verificando scripts de migra√ß√£o..." -ForegroundColor Yellow

$migrationFiles = Get-ChildItem "src\main\resources\db\changelog\migrations\*.sql" | Sort-Object Name

Write-Host "Scripts de migra√ß√£o encontrados:" -ForegroundColor Cyan
$migrationFiles | ForEach-Object { Write-Host "  - $($_.Name)" -ForegroundColor White }

Write-Host ""

# Verificar problemas espec√≠ficos nos scripts
Write-Host "üîç Verificando problemas de sintaxe H2..." -ForegroundColor Yellow

$problematicPatterns = @(
    @{ Pattern = "ON UPDATE CURRENT_TIMESTAMP"; Description = "Sintaxe n√£o suportada pelo H2" },
    @{ Pattern = "CREATE INDEX IF NOT EXISTS"; Description = "Sintaxe problem√°tica no H2" },
    @{ Pattern = "DROP TABLE IF EXISTS"; Description = "Sintaxe problem√°tica no H2" },
    @{ Pattern = "CONSTRAINT.*FOREIGN KEY"; Description = "Constraints nomeadas podem causar problemas" },
    @{ Pattern = "COMMENT ON"; Description = "Coment√°rios n√£o suportados pelo H2" }
)

foreach ($file in $migrationFiles) {
    $content = Get-Content $file.FullName -Raw
    $hasProblems = $false
    
    Write-Host "Verificando $($file.Name)..." -ForegroundColor Cyan
    
    foreach ($pattern in $problematicPatterns) {
        if ($content -match $pattern.Pattern) {
            Write-Host "  ‚ùå $($pattern.Description): $($pattern.Pattern)" -ForegroundColor Red
            $hasProblems = $true
        }
    }
    
    if (-not $hasProblems) {
        Write-Host "  ‚úÖ Nenhum problema encontrado" -ForegroundColor Green
    }
    
    Write-Host ""
}

# Verificar inconsist√™ncias entre schema.sql e test-schema.sql
Write-Host "üîç Verificando inconsist√™ncias entre schemas..." -ForegroundColor Yellow

$productionSchema = Get-Content "src\main\resources\schema.sql" -Raw
$testSchema = Get-Content "src\test\resources\test-schema.sql" -Raw

# Verificar se as colunas scheduled_date e due_date existem em ambos
if ($productionSchema -match "scheduled_date" -and $testSchema -match "scheduled_date") {
    Write-Host "‚úÖ Coluna scheduled_date presente em ambos os schemas" -ForegroundColor Green
} else {
    Write-Host "‚ùå Coluna scheduled_date inconsistente entre schemas" -ForegroundColor Red
}

if ($productionSchema -match "due_date" -and $testSchema -match "due_date") {
    Write-Host "‚úÖ Coluna due_date presente em ambos os schemas" -ForegroundColor Green
} else {
    Write-Host "‚ùå Coluna due_date inconsistente entre schemas" -ForegroundColor Red
}

# Verificar se a tabela integration_sync_status est√° definida
if ($productionSchema -match "integration_sync_status") {
    Write-Host "‚úÖ Tabela integration_sync_status presente no schema de produ√ß√£o" -ForegroundColor Green
} else {
    Write-Host "‚ùå Tabela integration_sync_status AUSENTE no schema de produ√ß√£o" -ForegroundColor Red
    Write-Host "  Esta tabela √© necess√°ria para o funcionamento das integra√ß√µes!" -ForegroundColor Yellow
}

if ($testSchema -match "integration_sync_status") {
    Write-Host "‚úÖ Tabela integration_sync_status presente no schema de teste" -ForegroundColor Green
} else {
    Write-Host "‚ùå Tabela integration_sync_status AUSENTE no schema de teste" -ForegroundColor Red
}

Write-Host ""

# Verificar se h√° migra√ß√µes duplicadas ou conflitantes
Write-Host "üîç Verificando migra√ß√µes duplicadas..." -ForegroundColor Yellow

$migrationNames = $migrationFiles | ForEach-Object { $_.BaseName }
$duplicates = $migrationNames | Group-Object | Where-Object { $_.Count -gt 1 }

if ($duplicates) {
    Write-Host "‚ùå Migra√ß√µes duplicadas encontradas:" -ForegroundColor Red
    $duplicates | ForEach-Object { Write-Host "  - $($_.Name)" -ForegroundColor Red }
} else {
    Write-Host "‚úÖ Nenhuma migra√ß√£o duplicada encontrada" -ForegroundColor Green
}

Write-Host ""

# Verificar se h√° migra√ß√µes com datas inconsistentes
Write-Host "üîç Verificando datas das migra√ß√µes..." -ForegroundColor Yellow

$migrationDates = $migrationFiles | ForEach-Object { 
    if ($_.Name -match "(\d{8})") {
        [PSCustomObject]@{
            Name = $_.Name
            Date = [DateTime]::ParseExact($matches[1], "yyyyMMdd", $null)
        }
    }
} | Sort-Object Date

$outOfOrder = @()
for ($i = 1; $i -lt $migrationDates.Count; $i++) {
    if ($migrationDates[$i].Date -lt $migrationDates[$i-1].Date) {
        $outOfOrder += "$($migrationDates[$i].Name) (antes de $($migrationDates[$i-1].Name))"
    }
}

if ($outOfOrder) {
    Write-Host "‚ùå Migra√ß√µes fora de ordem cronol√≥gica:" -ForegroundColor Red
    $outOfOrder | ForEach-Object { Write-Host "  - $_" -ForegroundColor Red }
} else {
    Write-Host "‚úÖ Migra√ß√µes em ordem cronol√≥gica correta" -ForegroundColor Green
}

Write-Host ""

# Resumo e recomenda√ß√µes
Write-Host "üìã RESUMO E RECOMENDA√á√ïES:" -ForegroundColor Green
Write-Host ""

Write-Host "1. Verifique se a tabela integration_sync_status est√° sendo criada corretamente" -ForegroundColor Yellow
Write-Host "2. Execute as migra√ß√µes em ordem cronol√≥gica" -ForegroundColor Yellow
Write-Host "3. Teste as migra√ß√µes em ambiente de desenvolvimento antes de produ√ß√£o" -ForegroundColor Yellow
Write-Host "4. Considere usar Liquibase ou Flyway para gerenciar migra√ß√µes" -ForegroundColor Yellow

Write-Host ""
Write-Host "üéØ An√°lise conclu√≠da!" -ForegroundColor Green
